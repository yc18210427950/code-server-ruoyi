{
  "manifest": {
    "author": {
      "name": "Nick Fisher"
    },
    "name": "deepmerge",
    "description": "A library for deep (recursive) merging of Javascript objects",
    "keywords": [
      "merge",
      "deep",
      "extend",
      "copy",
      "clone",
      "recursive"
    ],
    "version": "1.3.2",
    "homepage": "https://github.com/KyleAMathews/deepmerge",
    "repository": {
      "type": "git",
      "url": "git://github.com/KyleAMathews/deepmerge.git"
    },
    "main": "index",
    "engines": {
      "node": ">=0.10.0"
    },
    "scripts": {
      "test": "tap test/*.js && jsmd README.markdown"
    },
    "dependencies": {},
    "devDependencies": {
      "jsmd": "0.3.1",
      "tap": "~7.1.2"
    },
    "license": "MIT",
    "_registry": "npm",
    "_loc": "/config/.cache/yarn/v6/npm-deepmerge-1.3.2-1663691629d4dbfe364fa12a2a4f0aa86aa3a050-integrity/node_modules/deepmerge/package.json",
    "readmeFilename": "README.markdown",
    "readme": "deepmerge\n=========\n\n> ~550B gzipped, ~1.0kB minified\n\nMerge the enumerable attributes of two objects deeply.\n\nexample\n=======\n\n<!--js\nvar merge = require('./')\n-->\n\n```js\nvar x = {\n    foo: { bar: 3 },\n    array: [{\n        does: 'work',\n        too: [ 1, 2, 3 ]\n    }]\n}\n\nvar y = {\n    foo: { baz: 4 },\n    quux: 5,\n    array: [{\n        does: 'work',\n        too: [ 4, 5, 6 ]\n    }, {\n        really: 'yes'\n    }]\n}\n\nvar expected = {\n    foo: {\n        bar: 3,\n        baz: 4\n    },\n    array: [{\n        does: 'work',\n        too: [ 1, 2, 3, 4, 5, 6 ]\n    }, {\n        really: 'yes'\n    }],\n    quux: 5\n}\n\nmerge(x, y) // => expected\n```\n\nmethods\n=======\n\n```\nvar merge = require('deepmerge')\n```\n\nmerge(x, y, [options])\n-----------\n\nMerge two objects `x` and `y` deeply, returning a new merged object with the\nelements from both `x` and `y`.\n\nIf an element at the same key is present for both `x` and `y`, the value from\n`y` will appear in the result.\n\nMerging creates a new object, so that neither `x` or `y` are be modified.  However, child objects on `x` or `y` are copied over - if you to copy all values, you must pass `true` to the clone option.\n\nmerge.all(arrayOfObjects, [options])\n-----------\n\nMerges two or more objects into a single result object.\n\n```js\nvar x = { foo: { bar: 3 } }\nvar y = { foo: { baz: 4 } }\nvar z = { bar: 'yay!' }\n\nvar expected = { foo: { bar: 3, baz: 4 }, bar: 'yay!' }\n\nmerge.all([x, y, z]) // => expected\n```\n\n### options\n\n#### arrayMerge\n\nThe merge will also merge arrays and array values by default.  However, there are nigh-infinite valid ways to merge arrays, and you may want to supply your own.  You can do this by passing an `arrayMerge` function as an option.\n\n```js\nfunction concatMerge(destinationArray, sourceArray, options) {\n\tdestinationArray // => [1, 2, 3]\n\tsourceArray // => [3, 2, 1]\n\toptions // => { arrayMerge: concatMerge }\n\treturn destinationArray.concat(sourceArray)\n}\nmerge([1, 2, 3], [3, 2, 1], { arrayMerge: concatMerge }) // => [1, 2, 3, 3, 2, 1]\n```\n\n#### clone\n\nDefaults to `false`.  If `clone` is `true` then both `x` and `y` are recursively cloned as part of the merge.\n\ninstall\n=======\n\nWith [npm](http://npmjs.org) do:\n\n```sh\nnpm install deepmerge\n```\n\ntest\n====\n\nWith [npm](http://npmjs.org) do:\n\n```sh\nnpm test\n```\n\nlicense\n=======\n\nMIT\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2012 Nicholas Fisher\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmmirror.com/deepmerge/-/deepmerge-1.3.2.tgz#1663691629d4dbfe364fa12a2a4f0aa86aa3a050",
    "type": "tarball",
    "reference": "https://registry.npmmirror.com/deepmerge/-/deepmerge-1.3.2.tgz",
    "hash": "1663691629d4dbfe364fa12a2a4f0aa86aa3a050",
    "integrity": "sha512-qjMjTrk+RKv/sp4RPDpV5CnKhxjFI9p+GkLBOls5A8EEElldYWCWA9zceAkmfd0xIo2aU1nxiaLFoiya2sb6Cg==",
    "registry": "npm",
    "packageName": "deepmerge",
    "cacheIntegrity": "sha512-qjMjTrk+RKv/sp4RPDpV5CnKhxjFI9p+GkLBOls5A8EEElldYWCWA9zceAkmfd0xIo2aU1nxiaLFoiya2sb6Cg== sha1-FmNpFinU2/42T6EqKk8KqGqjoFA="
  },
  "registry": "npm",
  "hash": "1663691629d4dbfe364fa12a2a4f0aa86aa3a050"
}