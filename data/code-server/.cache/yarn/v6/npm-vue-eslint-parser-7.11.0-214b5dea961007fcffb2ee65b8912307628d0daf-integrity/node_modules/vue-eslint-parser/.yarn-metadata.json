{
  "manifest": {
    "name": "vue-eslint-parser",
    "version": "7.11.0",
    "description": "The ESLint custom parser for `.vue` files.",
    "engines": {
      "node": ">=8.10"
    },
    "main": "index.js",
    "files": [
      "index.*"
    ],
    "peerDependencies": {
      "eslint": ">=5.0.0"
    },
    "dependencies": {
      "debug": "^4.1.1",
      "eslint-scope": "^5.1.1",
      "eslint-visitor-keys": "^1.1.0",
      "espree": "^6.2.1",
      "esquery": "^1.4.0",
      "lodash": "^4.17.21",
      "semver": "^6.3.0"
    },
    "devDependencies": {
      "@babel/core": "^7.15.0",
      "@babel/eslint-parser": "^7.15.0",
      "@babel/plugin-syntax-decorators": "^7.14.5",
      "@babel/plugin-syntax-pipeline-operator": "^7.15.0",
      "@babel/plugin-syntax-typescript": "^7.14.5",
      "@mysticatea/eslint-plugin": "^13.0.0",
      "@types/debug": "0.0.30",
      "@types/eslint": "^7.2.6",
      "@types/estree": "0.0.45",
      "@types/lodash": "^4.14.120",
      "@types/mocha": "^5.2.4",
      "@types/node": "^10.12.21",
      "@types/semver": "^7.3.6",
      "@typescript-eslint/eslint-plugin": "^4.9.1",
      "@typescript-eslint/parser": "^4.14.0",
      "babel-eslint": "^10.0.1",
      "chokidar": "^2.0.4",
      "codecov": "^3.1.0",
      "cross-spawn": "^6.0.5",
      "dts-bundle": "^0.7.3",
      "eslint": "^7.0.0",
      "eslint-plugin-jsonc": "^1.4.0",
      "eslint-plugin-node-dependencies": "^0.5.0",
      "fs-extra": "^7.0.1",
      "jsonc-eslint-parser": "^0.6.0",
      "mocha": "^6.1.4",
      "npm-run-all": "^4.1.5",
      "nyc": "^14.0.0",
      "opener": "^1.5.1",
      "prettier": "^2.3.1",
      "rimraf": "^2.6.3",
      "rollup": "^1.1.2",
      "rollup-plugin-node-resolve": "^4.0.0",
      "rollup-plugin-sourcemaps": "^0.4.2",
      "ts-node": "^8.1.0",
      "typescript": "~4.0.5",
      "wait-on": "^3.2.0",
      "warun": "^1.0.0"
    },
    "scripts": {
      "prebuild": "npm run -s clean",
      "build": "tsc --module es2015 && rollup -c -o index.js && dts-bundle --name vue-eslint-parser --main .temp/index.d.ts --out ../index.d.ts",
      "clean": "rimraf .nyc_output .temp coverage index.*",
      "codecov": "codecov",
      "coverage": "opener ./coverage/lcov-report/index.html",
      "lint": "eslint src test package.json --ext .js,.ts",
      "setup": "git submodule update --init && cd test/fixtures/eslint && npm install",
      "pretest": "run-s build lint",
      "test": "npm run -s test:mocha",
      "test:mocha": "nyc mocha \"test/*.js\" --reporter dot --timeout 60000",
      "test:debug": "mocha --require ts-node/register/transpile-only \"test/*.js\" --reporter dot --timeout 60000",
      "preupdate-fixtures": "npm run -s build",
      "update-fixtures": "node scripts/update-fixtures-ast.js && node scripts/update-fixtures-document-fragment.js",
      "preversion": "npm test",
      "version": "npm run -s build",
      "postversion": "git push && git push --tags",
      "prewatch": "npm run -s clean",
      "watch": "run-p watch:*",
      "watch:tsc": "tsc --module es2015 --watch",
      "watch:rollup": "wait-on .temp/index.js && rollup -c -o index.js --watch",
      "watch:test": "wait-on index.js && warun index.js \"test/*.js\" \"test/fixtures/ast/*/*.json\" \"test/fixtures/*\" --debounce 1000 --no-initial -- nyc mocha \"test/*.js\" --reporter dot --timeout 10000",
      "watch:update-ast": "wait-on index.js && warun index.js \"test/fixtures/ast/*/*.vue\" -- node scripts/update-fixtures-ast.js",
      "watch:coverage-report": "wait-on coverage/lcov-report/index.html && opener coverage/lcov-report/index.html"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/vuejs/vue-eslint-parser.git"
    },
    "keywords": [],
    "author": {
      "name": "Toru Nagashima"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/vuejs/vue-eslint-parser/issues"
    },
    "homepage": "https://github.com/vuejs/vue-eslint-parser#readme",
    "funding": "https://github.com/sponsors/mysticatea",
    "_registry": "npm",
    "_loc": "/config/.cache/yarn/v6/npm-vue-eslint-parser-7.11.0-214b5dea961007fcffb2ee65b8912307628d0daf-integrity/node_modules/vue-eslint-parser/package.json",
    "readmeFilename": "README.md",
    "readme": "# vue-eslint-parser\n\n[![npm version](https://img.shields.io/npm/v/vue-eslint-parser.svg)](https://www.npmjs.com/package/vue-eslint-parser)\n[![Downloads/month](https://img.shields.io/npm/dm/vue-eslint-parser.svg)](http://www.npmtrends.com/vue-eslint-parser)\n[![Build Status](https://github.com/vuejs/vue-eslint-parser/workflows/CI/badge.svg)](https://github.com/vuejs/vue-eslint-parser/actions)\n[![Coverage Status](https://codecov.io/gh/vuejs/vue-eslint-parser/branch/master/graph/badge.svg)](https://codecov.io/gh/vuejs/vue-eslint-parser)\n[![Dependency Status](https://david-dm.org/vuejs/vue-eslint-parser.svg)](https://david-dm.org/vuejs/vue-eslint-parser)\n\nThe ESLint custom parser for `.vue` files.\n\n## ‚§¥Ô∏è Motivation\n\nThis parser allows us to lint the `<template>` of `.vue` files. We can make mistakes easily on `<template>` if we use complex directives and expressions in the template. This parser and the rules of [eslint-plugin-vue](https://github.com/vuejs/eslint-plugin-vue) would catch some of the mistakes.\n\n## üíø Installation\n\n```bash\n$ npm install --save-dev eslint vue-eslint-parser\n```\n\n- Requires Node.js 6.5.0 or later.\n- Requires ESLint 5.0.0 or later.\n- Requires `babel-eslint` 8.1.1 or later if you want it. (optional)\n- Requires `@typescript-eslint/parser` 1.0.0 or later if you want it. (optional)\n\n## üìñ Usage\n\n1. Write `parser` option into your `.eslintrc.*` file.\n2. Use glob patterns or `--ext .vue` CLI option.\n\n```json\n{\n    \"extends\": \"eslint:recommended\",\n    \"parser\": \"vue-eslint-parser\"\n}\n```\n\n```console\n$ eslint \"src/**/*.{js,vue}\"\n# or\n$ eslint src --ext .vue\n```\n\n## üîß Options\n\n`parserOptions` has the same properties as what [espree](https://github.com/eslint/espree#usage), the default parser of ESLint, is supporting.\nFor example:\n\n```json\n{\n    \"parser\": \"vue-eslint-parser\",\n    \"parserOptions\": {\n        \"sourceType\": \"module\",\n        \"ecmaVersion\": 2018,\n        \"ecmaFeatures\": {\n            \"globalReturn\": false,\n            \"impliedStrict\": false,\n            \"jsx\": false\n        }\n    }\n}\n```\n\n### parserOptions.parser\n\nYou can use `parserOptions.parser` property to specify a custom parser to parse `<script>` tags.\nOther properties than parser would be given to the specified parser.\nFor example:\n\n```json\n{\n    \"parser\": \"vue-eslint-parser\",\n    \"parserOptions\": {\n        \"parser\": \"babel-eslint\",\n        \"sourceType\": \"module\",\n        \"allowImportExportEverywhere\": false\n    }\n}\n```\n\n```json\n{\n    \"parser\": \"vue-eslint-parser\",\n    \"parserOptions\": {\n        \"parser\": \"@typescript-eslint/parser\"\n    }\n}\n```\n\nYou can also specify an object and change the parser separately for `<script lang=\"...\">`.\n\n```jsonc\n{\n    \"parser\": \"vue-eslint-parser\",\n    \"parserOptions\": {\n        \"parser\": {\n             // Script parser for `<script>`\n            \"js\": \"espree\",\n\n             // Script parser for `<script lang=\"ts\">`\n            \"ts\": \"@typescript-eslint/parser\",\n\n             // Script parser for vue directives (e.g. `v-if=` or `:attribute=`)\n             // and vue interpolations (e.g. `{{variable}}`).\n             // If not specified, the parser determined by `<script lang =\"...\">` is used.\n            \"<template>\": \"espree\",\n        }\n    }\n}\n```\n\nIf the `parserOptions.parser` is `false`, the `vue-eslint-parser` skips parsing `<script>` tags completely.\nThis is useful for people who use the language ESLint community doesn't provide custom parser implementation.\n\n### parserOptions.vueFeatures\n\nYou can use `parserOptions.vueFeatures` property to specify how to parse related to Vue features.\nFor example:\n\n```json\n{\n    \"parser\": \"vue-eslint-parser\",\n    \"parserOptions\": {\n        \"vueFeatures\": {\n            \"filter\": true,\n            \"interpolationAsNonHTML\": false,\n            \"styleCSSVariableInjection\": true,\n        }\n    }\n}\n```\n\n### parserOptions.vueFeatures.filter\n\nYou can use `parserOptions.vueFeatures.filter` property to specify whether to parse the Vue2 filter. If you specify `false`, the parser does not parse `|` as a filter.\nFor example:\n\n```json\n{\n    \"parser\": \"vue-eslint-parser\",\n    \"parserOptions\": {\n        \"vueFeatures\": {\n            \"filter\": false\n        }\n    }\n}\n```\n\nIf you specify `false`, it can be parsed in the same way as Vue 3.\nThe following template parses as a bitwise operation.\n\n```vue\n<template>\n  <div>{{ a | b }}</div>\n</template>\n```\n\nHowever, the following template that are valid in Vue 2 cannot be parsed.\n\n```vue\n<template>\n  <div>{{ a | valid:filter }}</div>\n</template>\n```\n\n### parserOptions.vueFeatures.interpolationAsNonHTML\n\nYou can use `parserOptions.vueFeatures.interpolationAsNonHTML` property to specify whether to parse the interpolation as HTML. If you specify `true`, the parser handles the interpolation as non-HTML (However, you can use HTML escaping in the interpolation).\nFor example:\n\n```json\n{\n    \"parser\": \"vue-eslint-parser\",\n    \"parserOptions\": {\n        \"vueFeatures\": {\n            \"interpolationAsNonHTML\": true\n        }\n    }\n}\n```\n\nIf you specify `true`, it can be parsed in the same way as Vue 3.\nThe following template can be parsed well.\n\n```vue\n<template>\n  <div>{{a<b}}</div>\n</template>\n```\n\nBut, it cannot be parsed with Vue 2.\n\n### parserOptions.vueFeatures.styleCSSVariableInjection\n\nIf set to `true`, to parse expressions in `v-bind` CSS functions inside `<style>` tags. `v-bind()` is parsed into the `VExpressionContainer` AST node and held in the `VElement` of `<style>`. Default is `true`.\n\nSee also to [here](https://github.com/vuejs/rfcs/blob/master/active-rfcs/0043-sfc-style-variables.md).\n\n## üéá Usage for custom rules / plugins\n\n- This parser provides `parserServices` to traverse `<template>`.\n    - `defineTemplateBodyVisitor(templateVisitor, scriptVisitor, options)` ... returns ESLint visitor to traverse `<template>`.\n    - `getTemplateBodyTokenStore()` ... returns ESLint `TokenStore` to get the tokens of `<template>`.\n    - `getDocumentFragment()` ... returns the root `VDocumentFragment`.\n    - `defineCustomBlocksVisitor(context, customParser, rule, scriptVisitor)` ... returns ESLint visitor that parses and traverses the contents of the custom block.\n    - `defineDocumentVisitor(documentVisitor, options)` ... returns ESLint visitor to traverses the document.\n- [ast.md](./docs/ast.md) is `<template>` AST specification.\n- [mustache-interpolation-spacing.js](https://github.com/vuejs/eslint-plugin-vue/blob/b434ff99d37f35570fa351681e43ba2cf5746db3/lib/rules/mustache-interpolation-spacing.js) is an example.\n\n### `defineTemplateBodyVisitor(templateBodyVisitor, scriptVisitor, options)`\n\n*Arguments*\n\n- `templateBodyVisitor` ... Event handlers for `<template>`.\n- `scriptVisitor` ... Event handlers for `<script>` or scripts. (optional)\n- `options` ... Options. (optional)\n  - `templateBodyTriggerSelector` ... Script AST node selector that triggers the templateBodyVisitor. Default is `\"Program:exit\"`. (optional)\n\n```ts\nimport { AST } from \"vue-eslint-parser\"\n\nexport function create(context) {\n    return context.parserServices.defineTemplateBodyVisitor(\n        // Event handlers for <template>.\n        {\n            VElement(node: AST.VElement): void {\n                //...\n            }\n        },\n        // Event handlers for <script> or scripts. (optional)\n        {\n            Program(node: AST.ESLintProgram): void {\n                //...\n            }\n        },\n        // Options. (optional)\n        {\n            templateBodyTriggerSelector: \"Program:exit\"\n        }\n    )\n}\n```\n\n## ‚ö†Ô∏è Known Limitations\n\nSome rules make warnings due to the outside of `<script>` tags.\nPlease disable those rules for `.vue` files as necessary.\n\n- [eol-last](http://eslint.org/docs/rules/eol-last)\n- [linebreak-style](http://eslint.org/docs/rules/linebreak-style)\n- [max-len](http://eslint.org/docs/rules/max-len)\n- [max-lines](http://eslint.org/docs/rules/max-lines)\n- [no-trailing-spaces](http://eslint.org/docs/rules/no-trailing-spaces)\n- [unicode-bom](http://eslint.org/docs/rules/unicode-bom)\n- Other rules which are using the source code text instead of AST might be confused as well.\n\n## üì∞ Changelog\n\n- [GitHub Releases](https://github.com/vuejs/vue-eslint-parser/releases)\n\n## üçª Contributing\n\nWelcome contributing!\n\nPlease use GitHub's Issues/PRs.\n\nIf you want to write code, please execute `npm install && npm run setup` after you cloned this repository.\nThe `npm install` command installs dependencies.\nThe `npm run setup` command initializes ESLint as git submodules for tests.\n\n### Development Tools\n\n- `npm test` runs tests and measures coverage.\n- `npm run build` compiles TypeScript source code to `index.js`, `index.js.map`, and `index.d.ts`.\n- `npm run coverage` shows the coverage result of `npm test` command with the default browser.\n- `npm run clean` removes the temporary files which are created by `npm test` and `npm run build`.\n- `npm run lint` runs ESLint.\n- `npm run setup` setups submodules to develop.\n- `npm run update-fixtures` updates files in `test/fixtures/ast` directory based on `test/fixtures/ast/*/source.vue` files.\n- `npm run watch` runs `build`, `update-fixtures`, and tests with `--watch` option.\n",
    "licenseText": "MIT License\n\nCopyright (c) 2016 Toru Nagashima\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmmirror.com/vue-eslint-parser/-/vue-eslint-parser-7.11.0.tgz#214b5dea961007fcffb2ee65b8912307628d0daf",
    "type": "tarball",
    "reference": "https://registry.npmmirror.com/vue-eslint-parser/-/vue-eslint-parser-7.11.0.tgz",
    "hash": "214b5dea961007fcffb2ee65b8912307628d0daf",
    "integrity": "sha512-qh3VhDLeh773wjgNTl7ss0VejY9bMMa0GoDG2fQVyDzRFdiU3L7fw74tWZDHNQXdZqxO3EveQroa9ct39D2nqg==",
    "registry": "npm",
    "packageName": "vue-eslint-parser",
    "cacheIntegrity": "sha512-qh3VhDLeh773wjgNTl7ss0VejY9bMMa0GoDG2fQVyDzRFdiU3L7fw74tWZDHNQXdZqxO3EveQroa9ct39D2nqg== sha1-IUtd6pYQB/z/su5luJEjB2KNDa8="
  },
  "registry": "npm",
  "hash": "214b5dea961007fcffb2ee65b8912307628d0daf"
}