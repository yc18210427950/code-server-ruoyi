{
  "manifest": {
    "name": "@hapi/bourne",
    "description": "JSON parse with prototype poisoning protection",
    "version": "1.3.2",
    "repository": {
      "type": "git",
      "url": "git://github.com/hapijs/bourne"
    },
    "main": "lib/index.js",
    "keywords": [
      "JSON",
      "parse",
      "safe",
      "prototype"
    ],
    "dependencies": {},
    "devDependencies": {
      "@hapi/code": "5.x.x",
      "@hapi/lab": "18.x.x",
      "benchmark": "^2.1.4"
    },
    "scripts": {
      "test": "lab -a @hapi/code -t 100 -L",
      "test-cov-html": "lab -a @hapi/code -r html -o coverage.html"
    },
    "license": "BSD-3-Clause",
    "_registry": "npm",
    "_loc": "/config/.cache/yarn/v6/npm-@hapi-bourne-1.3.2-0a7095adea067243ce3283e1b56b8a8f453b242a-integrity/node_modules/@hapi/bourne/package.json",
    "readmeFilename": "README.md",
    "readme": "<a href=\"http://hapijs.com\"><img src=\"https://raw.githubusercontent.com/hapijs/assets/master/images/family.png\" width=\"180px\" align=\"right\" /></a>\n\n# Bourne. JSON Bourne.\n\n`JSON.parse()` drop-in replacement with prototype poisoning protection\n\n[![Build Status](https://travis-ci.org/hapijs/bourne.svg)](https://travis-ci.org/hapijs/bourne)\n\n## Introduction\n\nConsider this:\n\n```\n> const a = '{\"__proto__\":{ \"b\":5}}';\n'{\"__proto__\":{ \"b\":5}}'\n\n> const b = JSON.parse(a);\n{ __proto__: { b: 5 } }\n\n> b.b;\nundefined\n\n> const c = Object.assign({}, b);\n{}\n\n> c.b\n5\n```\n\nThe problem is that `JSON.parse()` retains the `__proto__` property as a plain object key. By\nitself, this is not a security issue. However, as soon as that object is assigned to another or\niterated on and values copied, the `__proto__` property leaks and becomes the object's prototype.\n\n## API\n\n### `Bourne.parse(text, [reviver], [options])`\n\nParses a given JSON-formatted text into an object where:\n- `text` - the JSON text string.\n- `reviver` - the `JSON.parse()` optional `reviver` argument.\n- `options` - optional configuration object where:\n    - `protoAction` - optional string with one of:\n        - `'error'` - throw a `SyntaxError` when a `__proto__` key is found. This is the default value.\n        - `'remove'` - deletes any `__proto__` keys from the result object.\n        - `'ignore'` - skips all validation (same as calling `JSON.parse()` directly).\n\n### `Bourne.scan(obj, [options])`\n\nScans a given object for prototype properties where:\n- `obj` - the object being scanned.\n- `options` - optional configuration object where:\n    - `protoAction` - optional string with one of:\n        - `'error'` - throw a `SyntaxError` when a `__proto__` key is found. This is the default value.\n        - `'remove'` - deletes any `__proto__` keys from the input `obj`.\n",
    "licenseText": "Copyright (c) 2019, Sideway Inc, and project contributors  \nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n* Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n* Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n* The names of any contributors may not be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS OFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmmirror.com/@hapi/bourne/-/bourne-1.3.2.tgz#0a7095adea067243ce3283e1b56b8a8f453b242a",
    "type": "tarball",
    "reference": "https://registry.npmmirror.com/@hapi/bourne/-/bourne-1.3.2.tgz",
    "hash": "0a7095adea067243ce3283e1b56b8a8f453b242a",
    "integrity": "sha512-1dVNHT76Uu5N3eJNTYcvxee+jzX4Z9lfciqRRHCU27ihbUcYi+iSc2iml5Ke1LXe1SyJCLA0+14Jh4tXJgOppA==",
    "registry": "npm",
    "packageName": "@hapi/bourne",
    "cacheIntegrity": "sha512-1dVNHT76Uu5N3eJNTYcvxee+jzX4Z9lfciqRRHCU27ihbUcYi+iSc2iml5Ke1LXe1SyJCLA0+14Jh4tXJgOppA== sha1-CnCVreoGckPOMoPhtWuKj0U7JCo="
  },
  "registry": "npm",
  "hash": "0a7095adea067243ce3283e1b56b8a8f453b242a"
}