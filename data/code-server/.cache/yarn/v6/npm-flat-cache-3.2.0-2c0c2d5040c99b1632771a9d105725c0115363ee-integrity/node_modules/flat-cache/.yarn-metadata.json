{
  "manifest": {
    "name": "flat-cache",
    "version": "3.2.0",
    "description": "A stupidly simple key/value storage using files to persist some data",
    "repository": {
      "type": "git",
      "url": "https://github.com/jaredwray/flat-cache.git"
    },
    "license": "MIT",
    "author": {
      "name": "Jared Wray",
      "url": "https://jaredwray.com"
    },
    "main": "src/cache.js",
    "files": [
      "src/cache.js",
      "src/del.js",
      "src/utils.js"
    ],
    "engines": {
      "node": "^10.12.0 || >=12.0.0"
    },
    "precommit": [
      "npm run verify --silent"
    ],
    "prepush": [
      "npm run verify --silent"
    ],
    "scripts": {
      "eslint": "eslint --cache --cache-location=node_modules/.cache/ ./src/**/*.js ./test/**/*.js",
      "eslint-fix": "npm run eslint -- --fix",
      "autofix": "npm run eslint-fix",
      "check": "npm run eslint",
      "verify": "npm run eslint && npm run test:cache",
      "test:cache": "c8 mocha -R spec test/specs",
      "test:ci:cache": "c8 --reporter=lcov mocha -R spec test/specs",
      "test": "npm run verify --silent"
    },
    "keywords": [
      "json cache",
      "simple cache",
      "file cache",
      "key par",
      "key value",
      "cache"
    ],
    "devDependencies": {
      "c8": "^7.14.0",
      "chai": "^4.3.10",
      "eslint": "^7.13.0",
      "eslint-config-prettier": "^6.15.0",
      "eslint-plugin-mocha": "^8.0.0",
      "eslint-plugin-prettier": "^3.1.4",
      "glob-expand": "^0.2.1",
      "mocha": "^8.4.0",
      "prettier": "^2.1.2",
      "write": "^2.0.0"
    },
    "dependencies": {
      "flatted": "^3.2.9",
      "keyv": "^4.5.3",
      "rimraf": "^3.0.2"
    },
    "_registry": "npm",
    "_loc": "/config/.cache/yarn/v6/npm-flat-cache-3.2.0-2c0c2d5040c99b1632771a9d105725c0115363ee-integrity/node_modules/flat-cache/package.json",
    "readmeFilename": "README.md",
    "readme": "# flat-cache\n> A stupidly simple key/value storage using files to persist the data\n\n[![NPM Version](https://img.shields.io/npm/v/flat-cache.svg?style=flat)](https://npmjs.org/package/flat-cache)\n[![tests](https://github.com/jaredwray/flat-cache/actions/workflows/tests.yaml/badge.svg?branch=master)](https://github.com/jaredwray/flat-cache/actions/workflows/tests.yaml)\n[![codecov](https://codecov.io/github/jaredwray/flat-cache/branch/master/graph/badge.svg?token=KxR95XT3NF)](https://codecov.io/github/jaredwray/flat-cache)\n[![npm](https://img.shields.io/npm/dm/flat-cache)](https://npmjs.com/package/flat-cache)\n\n## install\n\n```bash\nnpm i --save flat-cache\n```\n\n## Usage\n\n```js\nvar flatCache = require('flat-cache')\n// loads the cache, if one does not exists for the given\n// Id a new one will be prepared to be created\nvar cache = flatCache.load('cacheId');\n\n// sets a key on the cache\ncache.setKey('key', { foo: 'var' });\n\n// get a key from the cache\ncache.getKey('key') // { foo: 'var' }\n\n// fetch the entire persisted object\ncache.all() // { 'key': { foo: 'var' } }\n\n// remove a key\ncache.removeKey('key'); // removes a key from the cache\n\n// save it to disk\ncache.save(); // very important, if you don't save no changes will be persisted.\n// cache.save( true /* noPrune */) // can be used to prevent the removal of non visited keys\n\n// loads the cache from a given directory, if one does\n// not exists for the given Id a new one will be prepared to be created\nvar cache = flatCache.load('cacheId', path.resolve('./path/to/folder'));\n\n// The following methods are useful to clear the cache\n// delete a given cache\nflatCache.clearCacheById('cacheId') // removes the cacheId document if one exists.\n\n// delete all cache\nflatCache.clearAll(); // remove the cache directory\n```\n\n## Motivation for this module\n\nI needed a super simple and dumb **in-memory cache** with optional disk persistance in order to make\na script that will beutify files with `esformatter` only execute on the files that were changed since the last run.\nTo make that possible we need to store the `fileSize` and `modificationTime` of the files. So a simple `key/value`\nstorage was needed and Bam! this module was born.\n\n## Important notes\n- If no directory is especified when the `load` method is called, a folder named `.cache` will be created\n  inside the module directory when `cache.save` is called. If you're committing your `node_modules` to any vcs, you\n  might want to ignore the default `.cache` folder, or specify a custom directory.\n- The values set on the keys of the cache should be `stringify-able` ones, meaning no circular references\n- All the changes to the cache state are done to memory\n- I could have used a timer or `Object.observe` to deliver the changes to disk, but I wanted to keep this module\n  intentionally dumb and simple\n- Non visited keys are removed when `cache.save()` is called. If this is not desired, you can pass `true` to the save call\n  like: `cache.save( true /* noPrune */ )`.\n\n## License\n\nMIT\n\n## Changelog\n\n[changelog](./changelog.md)\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) Roy Riojas and Jared Wray\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmmirror.com/flat-cache/-/flat-cache-3.2.0.tgz#2c0c2d5040c99b1632771a9d105725c0115363ee",
    "type": "tarball",
    "reference": "https://registry.npmmirror.com/flat-cache/-/flat-cache-3.2.0.tgz",
    "hash": "2c0c2d5040c99b1632771a9d105725c0115363ee",
    "integrity": "sha512-CYcENa+FtcUKLmhhqyctpclsq7QF38pKjZHsGNiSQF5r4FtoKDWabFDl3hzaEQMvT1LHEysw5twgLvpYYb4vbw==",
    "registry": "npm",
    "packageName": "flat-cache",
    "cacheIntegrity": "sha512-CYcENa+FtcUKLmhhqyctpclsq7QF38pKjZHsGNiSQF5r4FtoKDWabFDl3hzaEQMvT1LHEysw5twgLvpYYb4vbw== sha1-LAwtUEDJmxYydxqdEFclwBFTY+4="
  },
  "registry": "npm",
  "hash": "2c0c2d5040c99b1632771a9d105725c0115363ee"
}