{
  "manifest": {
    "name": "eslint-loader",
    "version": "2.2.1",
    "description": "eslint loader (for webpack)",
    "keywords": [
      "lint",
      "linter",
      "eslint",
      "loader",
      "webpack"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/webpack-contrib/eslint-loader.git"
    },
    "author": {
      "name": "Maxime Thirouin"
    },
    "license": "MIT",
    "files": [
      "index.js"
    ],
    "peerDependencies": {
      "eslint": ">=1.6.0 <7.0.0",
      "webpack": ">=2.0.0 <5.0.0"
    },
    "dependencies": {
      "loader-fs-cache": "^1.0.0",
      "loader-utils": "^1.0.2",
      "object-assign": "^4.0.1",
      "object-hash": "^1.1.4",
      "rimraf": "^2.6.1"
    },
    "devDependencies": {
      "ava": "^0.17.0",
      "eslint": "^6.0.1",
      "eslint-config-i-am-meticulous": "^11.0.0",
      "eslint-friendly-formatter": "^2.0.4",
      "husky": "^0.14.3",
      "mkdirp": "^0.5.1",
      "npmpub": "^4.0.1",
      "prettier": "^1.13.7",
      "pretty-quick": "^1.6.0",
      "webpack": "^4.0.0"
    },
    "scripts": {
      "precommit": "pretty-quick --staged",
      "lint": "eslint .",
      "ava": "ava",
      "test": "npm run lint && npm run ava",
      "release": "npmpub"
    },
    "eslintConfig": {
      "extends": "eslint-config-i-am-meticulous",
      "rules": {
        "no-var": 0,
        "prefer-const": 0
      }
    },
    "ava": {
      "files": [
        "test/*.js"
      ],
      "verbose": true
    },
    "_registry": "npm",
    "_loc": "/config/.cache/yarn/v6/npm-eslint-loader-2.2.1-28b9c12da54057af0845e2a6112701a2f6bf8337-integrity/node_modules/eslint-loader/package.json",
    "readmeFilename": "README.md",
    "readme": "# eslint-loader [![Build Status](https://travis-ci.org/webpack-contrib/eslint-loader.svg?branch=master)](https://travis-ci.org/webpack-contrib/eslint-loader)\n\n> eslint loader for webpack\n\n## Install\n\n```console\n$ npm install eslint-loader --save-dev\n```\n\n**NOTE**: You also need to install `eslint` from npm, if you haven't already:\n\n```console\n$ npm install eslint --save-dev\n```\n\n## Usage\n\nIn your webpack configuration\n\n```js\nmodule.exports = {\n  // ...\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: \"eslint-loader\",\n        options: {\n          // eslint options (if necessary)\n        }\n      }\n    ]\n  }\n  // ...\n};\n```\n\nWhen using with transpiling loaders (like `babel-loader`), make sure they are in correct order\n(bottom to top). Otherwise files will be checked after being processed by `babel-loader`\n\n```js\nmodule.exports = {\n  // ...\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        use: [\"babel-loader\", \"eslint-loader\"]\n      }\n    ]\n  }\n  // ...\n};\n```\n\nTo be safe, you can use `enforce: \"pre\"` section to check source files, not modified\nby other loaders (like `babel-loader`)\n\n```js\nmodule.exports = {\n  // ...\n  module: {\n    rules: [\n      {\n        enforce: \"pre\",\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: \"eslint-loader\"\n      },\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: \"babel-loader\"\n      }\n    ]\n  }\n  // ...\n};\n```\n\n### Options\n\nYou can pass [eslint options](http://eslint.org/docs/developer-guide/nodejs-api#cliengine)\nusing standard webpack [loader options](https://webpack.js.org/configuration/module/#useentry).\n\nNote that the config option you provide will be passed to the `CLIEngine`.\nThis is a different set of options than what you'd specify in `package.json` or `.eslintrc`.\nSee the [eslint docs](http://eslint.org/docs/developer-guide/nodejs-api#cliengine) for more detail.\n\n#### `fix` (default: false)\n\nThis option will enable\n[ESLint autofix feature](http://eslint.org/docs/user-guide/command-line-interface#fix).\n\n**Be careful: this option will change source files.**\n\n#### `cache` (default: false)\n\nThis option will enable caching of the linting results into a file.\nThis is particularly useful in reducing linting time when doing a full build.\n\nThis can either be a `boolean` value or the cache directory path(ex: `'./.eslint-loader-cache'`).\n\nIf `cache: true` is used, the cache file is written to the `./node_modules/.cache` directory.\nThis is the recommended usage.\n\n#### `formatter` (default: eslint stylish formatter)\n\nLoader accepts a function that will have one argument: an array of eslint messages (object).\nThe function must return the output as a string.\nYou can use official eslint formatters.\n\n```js\nmodule.exports = {\n  entry: \"...\",\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: \"eslint-loader\",\n        options: {\n          // several examples !\n\n          // default value\n          formatter: require(\"eslint/lib/formatters/stylish\"),\n\n          // community formatter\n          formatter: require(\"eslint-friendly-formatter\"),\n\n          // custom formatter\n          formatter: function(results) {\n            // `results` format is available here\n            // http://eslint.org/docs/developer-guide/nodejs-api.html#executeonfiles()\n\n            // you should return a string\n            // DO NOT USE console.*() directly !\n            return \"OUTPUT\";\n          }\n        }\n      }\n    ]\n  }\n};\n```\n\n#### `eslintPath` (default: \"eslint\")\n\nPath to `eslint` instance that will be used for linting.  \nIf the `eslintPath` is a folder like a official eslint, or specify a `formatter` option. now you dont have to install `eslint` .\n\n```js\nmodule.exports = {\n  entry: \"...\",\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: \"eslint-loader\",\n        options: {\n          eslintPath: path.join(__dirname, \"reusable-eslint\")\n        }\n      }\n    ]\n  }\n};\n```\n\n#### Errors and Warning\n\n**By default the loader will auto adjust error reporting depending\non eslint errors/warnings counts.**\nYou can still force this behavior by using `emitError` **or** `emitWarning` options:\n\n##### `emitError` (default: `false`)\n\nLoader will always return errors if this option is set to `true`.\n\n```js\nmodule.exports = {\n  entry: \"...\",\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: \"eslint-loader\",\n        options: {\n          emitError: true\n        }\n      }\n    ]\n  }\n};\n```\n\n##### `emitWarning` (default: `false`)\n\nLoader will always return warnings if option is set to `true`. If you're using hot module replacement, you may wish to enable this in development, or else updates will be skipped when there's an eslint error.\n\n#### `quiet` (default: `false`)\n\nLoader will process and report errors only and ignore warnings if this option is set to true\n\n```js\nmodule.exports = {\n  entry: \"...\",\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: \"eslint-loader\",\n        options: {\n          quiet: true\n        }\n      }\n    ]\n  }\n};\n```\n\n##### `failOnWarning` (default: `false`)\n\nLoader will cause the module build to fail if there are any eslint warnings.\n\n```js\nmodule.exports = {\n  entry: \"...\",\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: \"eslint-loader\",\n        options: {\n          failOnWarning: true\n        }\n      }\n    ]\n  }\n};\n```\n\n##### `failOnError` (default: `false`)\n\nLoader will cause the module build to fail if there are any eslint errors.\n\n```js\nmodule.exports = {\n  entry: \"...\",\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: \"eslint-loader\",\n        options: {\n          failOnError: true\n        }\n      }\n    ]\n  }\n};\n```\n\n##### `outputReport` (default: `false`)\n\nWrite the output of the errors to a file, for example a checkstyle xml file for use for reporting on Jenkins CI\n\nThe `filePath` is relative to the webpack config: output.path\nYou can pass in a different formatter for the output file, if none is passed in the default/configured formatter will be used\n\n```js\nmodule.exports = {\n  entry: \"...\",\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: \"eslint-loader\",\n        options: {\n          outputReport: {\n            filePath: \"checkstyle.xml\",\n            formatter: require(\"eslint/lib/formatters/checkstyle\")\n          }\n        }\n      }\n    ]\n  }\n};\n```\n\n## Gotchas\n\n### NoErrorsPlugin\n\n`NoErrorsPlugin` prevents webpack from outputting anything into a bundle. So even ESLint warnings\nwill fail the build. No matter what error settings are used for `eslint-loader`.\n\nSo if you want to see ESLint warnings in console during development using `WebpackDevServer`\nremove `NoErrorsPlugin` from webpack config.\n\n### Defining `configFile` or using `eslint -c path/.eslintrc`\n\nBear in mind that when you define `configFile`, `eslint` doesn't automatically look for\n`.eslintrc` files in the directory of the file to be linted.\nMore information is available in official eslint documentation in section [_Using Configuration Files_](http://eslint.org/docs/user-guide/configuring#using-configuration-files).\nSee [#129](https://github.com/webpack-contrib/eslint-loader/issues/129).\n\n---\n\n## Changelog\n[Changelog](CHANGELOG.md)\n\n## License\n[MIT](./LICENSE)\n",
    "licenseText": "Copyright JS Foundation and other contributors\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmmirror.com/eslint-loader/-/eslint-loader-2.2.1.tgz#28b9c12da54057af0845e2a6112701a2f6bf8337",
    "type": "tarball",
    "reference": "https://registry.npmmirror.com/eslint-loader/-/eslint-loader-2.2.1.tgz",
    "hash": "28b9c12da54057af0845e2a6112701a2f6bf8337",
    "integrity": "sha512-RLgV9hoCVsMLvOxCuNjdqOrUqIj9oJg8hF44vzJaYqsAHuY9G2YAeN3joQ9nxP0p5Th9iFSIpKo+SD8KISxXRg==",
    "registry": "npm",
    "packageName": "eslint-loader",
    "cacheIntegrity": "sha512-RLgV9hoCVsMLvOxCuNjdqOrUqIj9oJg8hF44vzJaYqsAHuY9G2YAeN3joQ9nxP0p5Th9iFSIpKo+SD8KISxXRg== sha1-KLnBLaVAV68IReKmEScBova/gzc="
  },
  "registry": "npm",
  "hash": "28b9c12da54057af0845e2a6112701a2f6bf8337"
}