{
  "manifest": {
    "name": "webpack-merge",
    "description": "Variant of merge that's useful for webpack configuration",
    "author": {
      "name": "Juho Vepsalainen",
      "email": "bebraw@gmail.com"
    },
    "version": "4.2.2",
    "scripts": {
      "build": "babel src -d lib",
      "watch": "npm-watch",
      "test": "mocha tests/test-*",
      "test:coverage": "istanbul cover node_modules/.bin/_mocha tests/test-*",
      "test:lint": "eslint src/ tests/ --cache",
      "preversion": "npm run test:lint && npm run build && npm test && git commit --allow-empty -am \"Update lib\""
    },
    "main": "lib/index.js",
    "files": [
      "lib"
    ],
    "dependencies": {
      "lodash": "^4.17.15"
    },
    "devDependencies": {
      "babel-cli": "^6.26.0",
      "babel-plugin-lodash": "^3.3.2",
      "babel-preset-es2015": "^6.24.1",
      "copy-webpack-plugin": "^4.4.1",
      "eslint": "^3.19.0",
      "eslint-config-airbnb": "^14.1.0",
      "eslint-plugin-import": "^2.9.0",
      "eslint-plugin-jsx-a11y": "^3.0.2",
      "eslint-plugin-react": "^6.10.3",
      "git-prepush-hook": "^1.0.2",
      "istanbul": "^0.4.5",
      "mocha": "^3.5.3",
      "npm-watch": "^0.1.9",
      "webpack": "^1.15.0"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/survivejs/webpack-merge.git"
    },
    "homepage": "https://github.com/survivejs/webpack-merge",
    "bugs": {
      "url": "https://github.com/survivejs/webpack-merge/issues"
    },
    "keywords": [
      "webpack",
      "merge"
    ],
    "license": "MIT",
    "pre-push": [
      "test:lint",
      "build",
      "test"
    ],
    "watch": {
      "build": {
        "patterns": [
          "src/**/*.js"
        ]
      },
      "test": {
        "patterns": [
          "src/**/*.js",
          "tests/**/*.js"
        ]
      },
      "test:lint": {
        "patterns": [
          "src/**/*.js",
          "tests/**/*.js"
        ]
      }
    },
    "_registry": "npm",
    "_loc": "/config/.cache/yarn/v6/npm-webpack-merge-4.2.2-a27c52ea783d1398afd2087f547d7b9d2f43634d-integrity/node_modules/webpack-merge/package.json",
    "readmeFilename": "README.md",
    "readme": "[![build status](https://secure.travis-ci.org/survivejs/webpack-merge.svg)](http://travis-ci.org/survivejs/webpack-merge) [![codecov](https://codecov.io/gh/survivejs/webpack-merge/branch/master/graph/badge.svg)](https://codecov.io/gh/survivejs/webpack-merge)\n\n# webpack-merge - Merge designed for Webpack\n\n**webpack-merge** provides a `merge` function that concatenates arrays and merges objects creating a new object. If functions are encountered, it will execute them, run the results through the algorithm, and then wrap the returned values within a function again.\n\nThis behavior is particularly useful in configuring webpack although it has uses beyond it. Whenever you need to merge configuration objects, **webpack-merge** can come in handy.\n\nThere's also a webpack specific merge variant known as `merge.smart` that's able to take webpack specifics into account (i.e., it can flatten loader definitions).\n\n## Standard Merging\n\n### **`merge(...configuration | [...configuration])`**\n\n`merge` is the core, and the most important idea, of the API. Often this is all you need unless you want further customization.\n\n```javascript\n// Default API\nvar output = merge(object1, object2, object3, ...);\n\n// You can pass an array of objects directly.\n// This works with all available functions.\nvar output = merge([object1, object2, object3]);\n\n// Please note that where keys match,\n// the objects to the right take precedence:\nvar output = merge(\n  { fruit: \"apple\", color: \"red\" },\n  { fruit: \"strawberries\" }\n);\nconsole.log(output);\n// { color: \"red\", fruit: \"strawberries\"}\n```\n\n### **`merge({ customizeArray, customizeObject })(...configuration | [...configuration])`**\n\n`merge` behavior can be customized per field through a curried customization API.\n\n```javascript\n// Customizing array/object behavior\nvar output = merge(\n  {\n    customizeArray(a, b, key) {\n      if (key === 'extensions') {\n        return _.uniq([...a, ...b]);\n      }\n\n      // Fall back to default merging\n      return undefined;\n    },\n    customizeObject(a, b, key) {\n      if (key === 'module') {\n        // Custom merging\n        return _.merge({}, a, b);\n      }\n\n      // Fall back to default merging\n      return undefined;\n    }\n  }\n)(object1, object2, object3, ...);\n```\nFor example, if the previous code was invoked with only `object1` and `object2`\nwith `object1` as:\n```\n{\n    foo1: ['object1'],\n    foo2: ['object1'],\n    bar1: { object1: {} },\n    bar2: { object1: {} },\n}\n```\nand `object2` as:\n```\n{\n    foo1: ['object2'],\n    foo2: ['object2'],\n    bar1: { object2: {} },\n    bar2: { object2: {} },\n}\n```\nthen `customizeArray` will be invoked for each property of `Array` type, i.e:\n```\ncustomizeArray(['object1'], ['object2'], 'foo1');\ncustomizeArray(['object1'], ['object2'], 'foo2');\n```\nand `customizeObject` will be invoked for each property of `Object` type, i.e:\n```\ncustomizeObject({ object1: {} }, { object2: {} }, bar1);\ncustomizeObject({ object1: {} }, { object2: {} }, bar2);\n```\n\n### **`merge.unique(<field>, <fields>, field => field)`**\n\nThe first <field> is the config property to look through for duplicates.\n\n<fields> represents the values that should be unique when you run the field => field function on each duplicate.\n\n```javascript\nconst output = merge({\n  customizeArray: merge.unique(\n    'plugins',\n    ['HotModuleReplacementPlugin'],\n    plugin => plugin.constructor && plugin.constructor.name\n  )\n})({\n  plugins: [\n    new webpack.HotModuleReplacementPlugin()\n  ]\n}, {\n  plugins: [\n    new webpack.HotModuleReplacementPlugin()\n  ]\n});\n\n// Output contains only single HotModuleReplacementPlugin now.\n```\n\n## Merging with Strategies\n\n### **`merge.strategy({ <field>: '<prepend|append|replace>''})(...configuration | [...configuration])`**\n\nGiven you may want to configure merging behavior per field, there's a strategy variant:\n\n```javascript\n// Merging with a specific merge strategy\nvar output = merge.strategy(\n  {\n    entry: 'prepend', // or 'replace', defaults to 'append'\n    'module.rules': 'prepend'\n  }\n)(object1, object2, object3, ...);\n```\n\n### **`merge.smartStrategy({ <key>: '<prepend|append|replace>''})(...configuration | [...configuration])`**\n\nThe same idea works with smart merging too (described below in greater detail).\n\n```javascript\nvar output = merge.smartStrategy(\n  {\n    entry: 'prepend', // or 'replace'\n    'module.rules': 'prepend'\n  }\n)(object1, object2, object3, ...);\n```\n\n## Smart Merging\n\n### **`merge.smart(...configuration | [...configuration])`**\n\n*webpack-merge* tries to be smart about merging loaders when `merge.smart` is used. Loaders with matching tests will be merged into a single loader value.\n\nNote that the logic picks up webpack 2 `rules` kind of syntax as well. The examples below have been written in webpack 1 syntax.\n\n**package.json**\n\n```json5\n{\n  \"scripts\": {\n    \"start\": \"webpack-dev-server\",\n    \"build\": \"webpack\"\n  },\n  // ...\n}\n```\n\n**webpack.config.js**\n\n```javascript\nvar path = require('path');\nvar merge = require('webpack-merge');\n\nvar TARGET = process.env.npm_lifecycle_event;\n\nvar common = {\n  entry: path.join(__dirname, 'app'),\n  ...\n  module: {\n    loaders: [\n      {\n        test: /\\.css$/,\n        loaders: ['style', 'css'],\n      },\n    ],\n  },\n};\n\nif(TARGET === 'start') {\n  module.exports = merge(common, {\n    module: {\n      // loaders will get concatenated!\n      loaders: [\n        {\n          test: /\\.jsx?$/,\n          loader: 'babel?stage=1',\n          include: path.join(ROOT_PATH, 'app'),\n        },\n      ],\n    },\n    ...\n  });\n}\n\nif(TARGET === 'build') {\n  module.exports = merge(common, {\n    ...\n  });\n}\n\n...\n```\n\n**Loader string values `loader: 'babel'` override each other.**\n\n```javascript\nmerge.smart({\n  loaders: [{\n    test: /\\.js$/,\n    loader: 'babel'\n  }]\n}, {\n  loaders: [{\n    test: /\\.js$/,\n    loader: 'coffee'\n  }]\n});\n// will become\n{\n  loaders: [{\n    test: /\\.js$/,\n    loader: 'coffee'\n  }]\n}\n```\n\n**Loader array values `loaders: ['babel']` will be merged, without duplication.**\n\n```javascript\nmerge.smart({\n  loaders: [{\n    test: /\\.js$/,\n    loaders: ['babel']\n  }]\n}, {\n  loaders: [{\n    test: /\\.js$/,\n    loaders: ['coffee']\n  }]\n});\n// will become\n{\n  loaders: [{\n    test: /\\.js$/,\n    // appended because Webpack evaluated these from right to left\n    // this way you can specialize behavior and build the loader chain\n    loaders: ['babel', 'coffee']\n  }]\n}\n```\n\n**Loader array values `loaders: ['babel']` can be reordered by including\noriginal loaders.**\n\n```javascript\nmerge.smart({\n  loaders: [{\n    test: /\\.js$/,\n    loaders: ['babel']\n  }]\n}, {\n  loaders: [{\n    test: /\\.js$/,\n    loaders: ['react-hot', 'babel']\n  }]\n});\n// will become\n{\n  loaders: [{\n    test: /\\.js$/,\n    // order of second argument is respected\n    loaders: ['react-hot', 'babel']\n  }]\n}\n```\n\nThis also works in reverse - the existing order will be maintained if possible:\n\n```javascript\nmerge.smart({\n  loaders: [{\n    test: /\\.css$/,\n    use: [\n      { loader: 'css-loader', options: { myOptions: true } },\n      { loader: 'style-loader' }\n    ]\n  }]\n}, {\n  loaders: [{\n    test: /\\.css$/,\n    use: [\n      { loader: 'style-loader', options: { someSetting: true } }\n    ]\n  }]\n});\n// will become\n{\n  loaders: [{\n    test: /\\.css$/,\n    use: [\n      { loader: 'css-loader', options: { myOptions: true } },\n      { loader: 'style-loader', options: { someSetting: true } }\n    ]\n  }]\n}\n```\n\nIn the case of an order conflict, the second order wins:\n```javascript\nmerge.smart({\n  loaders: [{\n    test: /\\.css$/,\n    use: [\n      { loader: 'css-loader' },\n      { loader: 'style-loader' }\n    ]\n  }]\n}, {\n  loaders: [{\n    test: /\\.css$/,\n    use: [\n      { loader: 'style-loader' },\n      { loader: 'css-loader' }\n    ]\n  }]\n});\n// will become\n{\n  loaders: [{\n    test: /\\.css$/,\n    use: [\n      { loader: 'style-loader' }\n      { loader: 'css-loader' },\n    ]\n  }]\n}\n```\n\n\n**Loader query strings `loaders: ['babel?plugins[]=object-assign']` will be overridden.**\n\n```javascript\nmerge.smart({\n  loaders: [{\n    test: /\\.js$/,\n    loaders: ['babel?plugins[]=object-assign']\n  }]\n}, {\n  loaders: [{\n    test: /\\.js$/,\n    loaders: ['babel', 'coffee']\n  }]\n});\n// will become\n{\n  loaders: [{\n    test: /\\.js$/,\n    loaders: ['babel', 'coffee']\n  }]\n}\n```\n\n**Loader arrays in source values will have loader strings merged into them.**\n\n```javascript\nmerge.smart({\n  loaders: [{\n    test: /\\.js$/,\n    loader: 'babel'\n  }]\n}, {\n  loaders: [{\n    test: /\\.js$/,\n    loaders: ['coffee']\n  }]\n});\n// will become\n{\n  loaders: [{\n    test: /\\.js$/,\n    // appended because Webpack evaluated these from right to left!\n    loaders: ['babel', 'coffee']\n  }]\n}\n```\n\n**Loader strings in source values will always override.**\n\n```javascript\nmerge.smart({\n  loaders: [{\n    test: /\\.js$/,\n    loaders: ['babel']\n  }]\n}, {\n  loaders: [{\n    test: /\\.js$/,\n    loader: 'coffee'\n  }]\n});\n// will become\n{\n  loaders: [{\n    test: /\\.js$/,\n    loader: 'coffee'\n  }]\n}\n```\n\n## Multiple Merging\n\n### **`merge.multiple(...configuration | [...configuration])`**\n\nSometimes you may need to support multiple targets, *webpack-merge* will accept an object where each key represents the target configuration. The output becomes an *array* of configurations where matching keys are merged and non-matching keys are added.\n\n```javascript\nvar path = require('path');\nvar baseConfig = {\n    server: {\n      target: 'node',\n      output: {\n        path: path.resolve(__dirname, 'dist'),\n        filename: 'lib.node.js'\n      }\n    },\n    client: {\n      output: {\n        path: path.resolve(__dirname, 'dist'),\n        filename: 'lib.js'\n      }\n    }\n  };\n\n// specialized configuration\nvar production = {\n    client: {\n      output: {\n        path: path.resolve(__dirname, 'dist'),\n        filename: '[name].[hash].js'\n      }\n    }\n  }\n\nmodule.exports = merge.multiple(baseConfig, production)\n```\n\n> Check out [SurviveJS - Webpack and React](http://survivejs.com/) to dig deeper into the topic.\n\n## Development\n\n1. `npm i`\n1. `npm run build`\n1. `npm run watch`\n\nBefore contributing, please open an issue where to discuss.\n\n## License\n\n*webpack-merge* is available under MIT. See LICENSE for more details.\n",
    "licenseText": "Copyright (c) 2015 Juho Vepsalainen\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmmirror.com/webpack-merge/-/webpack-merge-4.2.2.tgz#a27c52ea783d1398afd2087f547d7b9d2f43634d",
    "type": "tarball",
    "reference": "https://registry.npmmirror.com/webpack-merge/-/webpack-merge-4.2.2.tgz",
    "hash": "a27c52ea783d1398afd2087f547d7b9d2f43634d",
    "integrity": "sha512-TUE1UGoTX2Cd42j3krGYqObZbOD+xF7u28WB7tfUordytSjbWTIjK/8V0amkBfTYN4/pB/GIDlJZZ657BGG19g==",
    "registry": "npm",
    "packageName": "webpack-merge",
    "cacheIntegrity": "sha512-TUE1UGoTX2Cd42j3krGYqObZbOD+xF7u28WB7tfUordytSjbWTIjK/8V0amkBfTYN4/pB/GIDlJZZ657BGG19g== sha1-onxS6ng9E5iv0gh/VH17nS9DY00="
  },
  "registry": "npm",
  "hash": "a27c52ea783d1398afd2087f547d7b9d2f43634d"
}