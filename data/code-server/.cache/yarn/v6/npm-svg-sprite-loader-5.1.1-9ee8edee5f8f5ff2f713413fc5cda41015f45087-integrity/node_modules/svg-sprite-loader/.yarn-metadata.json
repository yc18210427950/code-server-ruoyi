{
  "manifest": {
    "name": "svg-sprite-loader",
    "version": "5.1.1",
    "description": "Webpack loader for creating SVG sprites",
    "keywords": [
      "svg",
      "sprite",
      "svg sprite",
      "svg stack",
      "webpack",
      "webpack2",
      "webpack3",
      "webpack loader",
      "webpack plugin"
    ],
    "homepage": "https://github.com/JetBrains/svg-sprite-loader#readme",
    "bugs": {
      "url": "https://github.com/JetBrains/svg-sprite-loader/issues"
    },
    "license": "MIT",
    "author": {
      "name": "kisenka"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/JetBrains/svg-sprite-loader.git"
    },
    "main": "lib/loader.js",
    "files": [
      "examples/**",
      "lib/**",
      "runtime/*.js",
      "plugin.js",
      "README.md",
      "LICENSE"
    ],
    "engines": {
      "node": ">=6"
    },
    "dependencies": {
      "bluebird": "^3.5.0",
      "deepmerge": "1.3.2",
      "domready": "1.0.8",
      "escape-string-regexp": "1.0.5",
      "html-webpack-plugin": "^3.2.0",
      "loader-utils": "^1.1.0",
      "svg-baker": "^1.5.0",
      "svg-baker-runtime": "^1.4.7",
      "url-slug": "2.0.0"
    },
    "devDependencies": {
      "babel-core": "^6.24.1",
      "babel-loader": "^6.4.1",
      "babel-plugin-transform-object-rest-spread": "6.23.0",
      "babel-preset-es2015": "^6.24.0",
      "babel-preset-react": "6.24.1",
      "chai": "^3.5.0",
      "ci-publish": "^1.3.1",
      "codeclimate-test-reporter": "0.4.1",
      "commitizen": "2.9.6",
      "css-loader": "^0.28.0",
      "cz-customizable": "^5.0.0",
      "eslint-config-airbnb-base": "^11.1.2",
      "eslint-plugin-import": "^2.2.0",
      "file-loader": "^3.0.1",
      "glob": "7.1.1",
      "html-loader": "^0.5.5",
      "husky": "^0.13.3",
      "istanbul": "^0.4.5",
      "memory-fs": "^0.4.1",
      "minimist": "^1.2.0",
      "mocha": "^7.0.0",
      "nyc": "^10.3.2",
      "pascal-case": "2.0.1",
      "react": "15.5.4",
      "react-dom": "15.5.4",
      "rollup": "^0.41.6",
      "rollup-plugin-buble": "^0.15.0",
      "rollup-plugin-commonjs": "^8.0.2",
      "rollup-plugin-node-resolve": "^3.0.0",
      "shelljs": "0.7.7",
      "standard-version": "4.0.0",
      "svgo": "^0.7.2",
      "svgo-loader": "^1.2.1",
      "validate-commit-msg": "^2.12.1",
      "wallaby-webpack": "^3.9.15",
      "webpack-cli": "^3.3.10",
      "webpack-toolkit": "^1.0.0"
    },
    "config": {
      "commitizen": {
        "path": "node_modules/cz-customizable"
      },
      "cz-customizable": {
        "config": ".cz-config.js"
      }
    },
    "scripts": {
      "bootstrap": "node scripts/bootstrap",
      "build:examples": "yarn env webpack-3 && yarn run build:runtime && node scripts/build-examples-dll && node scripts/build-examples",
      "build:runtime": "node scripts/build-runtime.js",
      "commit": "git-cz",
      "commitmsg": "validate-commit-msg",
      "env": "node scripts/select-env",
      "lint": "eslint --quiet lib runtime scripts test",
      "precommit": "yarn lint",
      "pretest": "yarn build:runtime",
      "prerelease": "yarn build:runtime && yarn lint && yarn test:all",
      "release": "yarn build:examples && git add examples && standard-version -a && git push --follow-tags origin master",
      "release:dry-run": "standard-version --no-verify",
      "test": "mocha test/*.test.js",
      "test:all": "yarn test:webpack-2 && yarn test:webpack-3 && yarn test:webpack-4",
      "test:webpack-2": "yarn env webpack-2 && yarn test",
      "test:webpack-3": "yarn env webpack-3 && yarn test",
      "test:webpack-4": "yarn env webpack-4 && yarn test",
      "upload-coverage": "codeclimate-test-reporter < coverage/lcov.info"
    },
    "_registry": "npm",
    "_loc": "/config/.cache/yarn/v6/npm-svg-sprite-loader-5.1.1-9ee8edee5f8f5ff2f713413fc5cda41015f45087-integrity/node_modules/svg-sprite-loader/package.json",
    "readmeFilename": "README.md",
    "readme": "# SVG sprite loader\n[![NPM version][version-img]][versions-img] [![Build status][ci-img]][ci-url] [![Documentation score][docs-coverage-img]][docs-coverage-url] [![Dependencies status][deps-img]][deps-url] [![Dev dependencies status][dev-deps-img]][dev-deps-url] [![NPM downloads][downloads-img]][npm-url]\n\nWebpack loader for creating SVG sprites.\n\n> :tada: 2.0 is out, please read the [migration guide & overview](2.0.md).\n\n> :warning: For old v0.x versions see [the README in the v0 branch](https://github.com/JetBrains/svg-sprite-loader/blob/v0/README.md).\n\n## Table of contents\n\n- [Why it's cool](#why-its-cool)\n- [Installation](#installation)\n- [Configuration](#configuration)\n  - [`symbolId`](#symbol-id)\n  - [`symbolRegExp`](#symbol-regexp)\n  - [`esModule`](#es-module)\n  - [Runtime configuration](#runtime-configuration)\n    - [`spriteModule`](#sprite-module)\n    - [`symbolModule`](#symbol-module)\n    - [`runtimeGenerator`](#runtime-generator)\n    - [`runtimeCompat`](#runtime-compat) (deprecated)\n    - [`runtimeOptions`](#runtime-options)\n  - [Extract configuration](#extract-configuration)\n    - [`extract`](#extract)\n    - [`spriteFilename`](#sprite-filename)\n    - [`publicPath`](#public-path)\n    - [`outputPath`](#output-path)\n    - [`plainSprite`](#plain-sprite)\n    - [`spriteAttrs`](#sprite-attrs)\n- [Examples](#examples)\n- [Contributing guidelines](#contributing-guidelines)\n- [License](#license)\n- [Credits](#credits)\n\n## Why it's cool\n\n- **Minimum initial configuration**. Most of the options are configured automatically.\n- **Runtime for browser**. Sprites are rendered and injected in pages automatically, you just refer to images via `<svg><use xlink:href=\"#id\"></use></svg>`.\n- **Isomorphic runtime for node/browser**. Can render sprites on server or in browser manually.\n- **Customizable**. Write/extend runtime module to implement custom sprite behaviour. Write/extend runtime generator to produce your own runtime, e.g. React component configured with imported symbol.\n- **External sprite file** is generated for images imported from css/scss/sass/less/styl/html ([SVG stacking technique](https://css-tricks.com/svg-fragment-identifiers-work/#article-header-id-4)).\n\n## Installation\n\n```bash\nnpm install svg-sprite-loader -D\n# via yarn\nyarn add svg-sprite-loader -D\n```\n\n## Configuration\n\n```js\n// webpack 1\n{\n  test: /\\.svg$/,\n  loader: 'svg-sprite-loader',\n  query: { ... }\n}\n\n// webpack 1 multiple loaders\n{\n  test: /\\.svg$/,\n  loaders: [\n    `svg-sprite-loader?${JSON.stringify({ ... })}`,\n    'svg-transform-loader',\n    'svgo-loader'\n  ]\n}\n\n// webpack >= 2\n{\n  test: /\\.svg$/,\n  loader: 'svg-sprite-loader',\n  options: { ... }\n}\n\n// webpack >= 2 multiple loaders\n{\n  test: /\\.svg$/,\n  use: [\n    { loader: 'svg-sprite-loader', options: { ... } },\n    'svg-transform-loader',\n    'svgo-loader'\n  ]\n}\n```\n\n<a id=\"symbol-id\"></a>\n### `symbolId` (`string | function(path, query)`, default `[name]`)\n\nHow `<symbol>` `id` attribute should be named. All patterns from [loader-utils#interpolateName](https://github.com/webpack/loader-utils#interpolatename)\nare supported. Also can be a function which accepts 2 args - file path and query string and return symbol id:\n\n```js\n{\n  symbolId: filePath => path.basename(filePath)\n}\n```\n\n<a id=\"symbol-regexp\"></a>\n### `symbolRegExp` (default `''`)\nPassed to the symbolId interpolator to support the [N] pattern in the loader-utils name interpolator\n\n<a id=\"es-module\"></a>\n### `esModule` (default `true`, autoconfigured)\n\nGenerated export format:\n- when `true` loader will produce `export default ...`.\n- when `false` the result is `module.exports = ...`.\n\nBy default depends on used webpack version: `true` for webpack >= 2, `false` otherwise.\n\n## Runtime configuration\n\nWhen you require an image, loader transforms it to SVG `<symbol>`, adds it to the special sprite storage and returns class instance\nthat represents symbol. It contains `id`, `viewBox` and `content` (`id`, `viewBox` and `url` in extract mode)\nfields and can later be used for referencing the sprite image, e.g:\n\n```js\nimport twitterLogo from './logos/twitter.svg';\n// twitterLogo === SpriteSymbol<id: string, viewBox: string, content: string>\n// Extract mode: SpriteSymbol<id: string, viewBox: string, url: string, toString: Function>\n\nconst rendered = `\n<svg viewBox=\"${twitterLogo.viewBox}\">\n  <use xlink:href=\"#${twitterLogo.id}\" />\n</svg>`;\n```\n\nWhen browser event `DOMContentLoaded` is fired, sprite will be automatically rendered and injected in the `document.body`.\nIf custom behaviour is needed (e.g. a different mounting target) default sprite module could be overridden via `spriteModule` option. Check example below.\n\n<a id=\"sprite-module\"></a>\n### `spriteModule` (autoconfigured)\n\nPath to sprite module that will be compiled and executed at runtime.\nBy default it depends on [`target`](https://webpack.js.org/configuration/target) webpack config option:\n- `svg-sprite-loader/runtime/browser-sprite.build` for 'web' target.\n- `svg-sprite-loader/runtime/sprite.build` for other targets.\n\nIf you need custom behavior, use this option to specify a path of your sprite implementation module.\nPath will be resolved relative to the current webpack build folder, e.g. `utils/sprite.js` placed in current project dir should be written as `./utils/sprite`.\n\nExample of sprite with custom mounting target (copypasted from [browser-sprite](https://github.com/JetBrains/svg-sprite-loader/blob/master/runtime/browser-sprite.js)):\n\n```js\nimport BrowserSprite from 'svg-baker-runtime/src/browser-sprite';\nimport domready from 'domready';\n\nconst sprite = new BrowserSprite();\ndomready(() => sprite.mount('#my-custom-mounting-target'));\n\nexport default sprite; // don't forget to export!\n```\n\nIt's highly recommended to extend default sprite classes:\n- [for browser-specific env](https://github.com/JetBrains/svg-baker/blob/master/packages/svg-baker-runtime/src/browser-sprite.js)\n- [for isomorphic env](https://github.com/JetBrains/svg-baker/blob/master/packages/svg-baker-runtime/src/sprite.js)\n\n<a id=\"symbol-module\"></a>\n### `symbolModule` (autoconfigured)\n\nSame as `spriteModule`, but for sprite symbol. By default also depends on `target` webpack config option:\n- `svg-baker-runtime/browser-symbol` for 'web' target.\n- `svg-baker-runtime/symbol` for other targets.\n\n<a id=\"runtime-generator\"></a>\n### `runtimeGenerator` ([default generator](https://github.com/JetBrains/svg-sprite-loader/blob/master/lib/runtime-generator.js))\n\nPath to node.js script that generates client runtime.\nUse this option if you need to produce your own runtime, e.g. React component configured with imported symbol. [Example](https://github.com/JetBrains/svg-sprite-loader/tree/master/examples/custom-runtime-generator).\n\n<a id=\"runtime-compat\"></a>\n### `runtimeCompat` (default `false`, deprecated)\n\nShould runtime be compatible with earlier v0.x loader versions. This option will be removed in the next major version release.\n\n<a id=\"runtime-options\"></a>\n### `runtimeOptions`\n\nArbitrary data passed to runtime generator. Reserved for future use when other runtime generators will be created.\n\n## Extract configuration\n\nIn the extract mode loader should be configured with plugin, otherwise an error is thrown. Example:\n\n```js\n// webpack.config.js\nconst SpriteLoaderPlugin = require('svg-sprite-loader/plugin');\n\n...\n\n{\n  plugins: [\n    new SpriteLoaderPlugin()\n  ]\n}\n```\n\n<a id=\"extract\"></a>\n### `extract` (default `false`, autoconfigured)\n\nSwitches loader to the extract mode.\nEnabled automatically for images imported from css/scss/sass/less/styl/html files.\n\n<a id=\"sprite-filename\"></a>\n### `spriteFilename` (type `string|Function<string>`,default `sprite.svg`)\n\nFilename of extracted sprite. Multiple sprites can be generated by specifying different loader rules restricted with `include` option or\nby providing custom function which recieves SVG file absolute path, e.g.:\n\n```js\n{\n  test: /\\.svg$/,\n  loader: 'svg-sprite-loader',\n  options: {\n    extract: true,\n    spriteFilename: svgPath => `sprite${svgPath.substr(-4)}`\n  }\n}\n```\n\n`[hash]` in sprite filename will be replaced by it's content hash.\nIt is also possible to generate sprite for each chunk by using `[chunkname]` pattern in spriteFilename option. This is experimental feature, use it with caution!\n\n<a id=\"public-path\"></a>\n### `publicPath` (type: `string`, default: `__webpack_public_path__`)\n\nCustom public path for sprite file.\n\n```js\n{\n  test: /\\.svg$/,\n  loader: 'svg-sprite-loader',\n  options: {\n    extract: true,\n    publicPath: '/'\n  }\n}\n```\n\n<a id=\"output-path\"></a>\n### `outputPath` (type: `string`, default: null`)\n\nCustom output path for sprite file.\nBy default it will use `publicPath`.\nThis param is useful if you want to store sprite is a directory with a custom http access.\n\n```js\n{\n  test: /\\.svg$/,\n  loader: 'svg-sprite-loader',\n  options: {\n    extract: true,\n    outputPath: 'custom-dir/sprites/'\n    publicPath: 'sprites/'\n  }\n}\n```\n\n<a id=\"plain-sprite\"></a>\n### Plain sprite\n\nYou can render plain sprite in extract mode without styles and usages. Pass `plainSprite: true` option to plugin constructor:\n\n```js\n{\n  plugins: [\n    new SpriteLoaderPlugin({ plainSprite: true })\n  ]\n}\n```\n\n<a id=\"sprite-attrs\"></a>\n### Sprite attributes\n\nSprite `<svg>` tag attributes can be specified via `spriteAttrs` plugin option:\n\n```js\n{\n  plugins: [\n    new SpriteLoaderPlugin({\n      plainSprite: true,\n      spriteAttrs: {\n        id: 'my-custom-sprite-id'\n      }\n    })\n  ]\n}\n```\n\n## Examples\n\nSee [examples](examples) folder.\n\n## Contributing guidelines\n\nSee [CONTRIBUTING.md](CONTRIBUTING.md).\n\n## License\n\nSee [LICENSE](LICENSE)\n\n## Credits\n\nHuge thanks for [all this people](https://github.com/JetBrains/svg-sprite-loader/graphs/contributors).\n\n[npm-url]: https://www.npmjs.com/package/svg-sprite-loader\n[version-img]: https://img.shields.io/npm/v/svg-sprite-loader.svg?style=flat-square\n[versions-img]: https://libraries.io/npm/svg-sprite-loader/versions\n[downloads-img]: https://img.shields.io/npm/dm/svg-sprite-loader.svg?style=flat-square\n[deps-url]: https://david-dm.org/JetBrains/svg-sprite-loader\n[deps-img]: https://img.shields.io/david/JetBrains/svg-sprite-loader.svg?style=flat-square\n[dev-deps-url]: https://david-dm.org/JetBrains/svg-sprite-loader?type=dev\n[dev-deps-img]: https://img.shields.io/david/dev/JetBrains/svg-sprite-loader.svg?style=flat-square\n[ci-url]: https://travis-ci.org/JetBrains/svg-sprite-loader\n[ci-img]: https://img.shields.io/travis/JetBrains/svg-sprite-loader.svg?style=flat-square\n[docs-coverage-url]: https://inch-ci.org/github/JetBrains/svg-sprite-loader\n[docs-coverage-img]: https://inch-ci.org/github/JetBrains/svg-sprite-loader.svg?branch=master&style=flat-square\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2017 Stas Kurilov (kisenka)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmmirror.com/svg-sprite-loader/-/svg-sprite-loader-5.1.1.tgz#9ee8edee5f8f5ff2f713413fc5cda41015f45087",
    "type": "tarball",
    "reference": "https://registry.npmmirror.com/svg-sprite-loader/-/svg-sprite-loader-5.1.1.tgz",
    "hash": "9ee8edee5f8f5ff2f713413fc5cda41015f45087",
    "integrity": "sha512-oRjDBw3AtZOb+XTx7XE3HcVju9RdnfdXttT3ZJB/vmWGJ+SM+xfXzh3yuVPIpySO8FjGhH5BtU63lGMI9WgYzA==",
    "registry": "npm",
    "packageName": "svg-sprite-loader",
    "cacheIntegrity": "sha512-oRjDBw3AtZOb+XTx7XE3HcVju9RdnfdXttT3ZJB/vmWGJ+SM+xfXzh3yuVPIpySO8FjGhH5BtU63lGMI9WgYzA== sha1-nujt7l+PX/L3E0E/xc2kEBX0UIc="
  },
  "registry": "npm",
  "hash": "9ee8edee5f8f5ff2f713413fc5cda41015f45087"
}