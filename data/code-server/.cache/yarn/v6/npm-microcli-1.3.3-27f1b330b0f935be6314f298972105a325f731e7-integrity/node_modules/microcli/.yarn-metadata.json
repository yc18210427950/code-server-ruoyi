{
  "manifest": {
    "name": "microcli",
    "version": "1.3.3",
    "description": "CLI scripts micro engine",
    "main": "./lib/index.js",
    "types": "./lib/index.d.ts",
    "scripts": {
      "build": "tsc",
      "lint": "tslint -c tslint.json 'src/*.ts'",
      "test": "yarn run lint && yarn run test:unit && yarn build && yarn run test:e2e",
      "test:unit": "jest ./src/index.spec.ts",
      "test:e2e": "jest ./src/index.e2e.spec.ts"
    },
    "lint-staged": {
      "src/*.{ts,tsx}": [
        "tslint --fix",
        "git add",
        "jest --bail --findRelatedTests"
      ]
    },
    "engines": {
      "node": ">=6.16.0"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/pawelgalazka/microcli.git"
    },
    "keywords": [
      "cli",
      "option",
      "parser",
      "command",
      "commander"
    ],
    "author": {
      "name": "Pawel Galazka"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/pawelgalazka/microcli/issues"
    },
    "homepage": "https://github.com/pawelgalazka/microcli#readme",
    "dependencies": {
      "lodash": "4.17.11",
      "microargs": "1.1.2"
    },
    "devDependencies": {
      "@types/dedent": "0.7.0",
      "@types/jest": "23.3.12",
      "@types/lodash": "4.14.120",
      "@types/node": "10.12.18",
      "dedent": "0.7.0",
      "husky": "1.3.1",
      "jest": "23.6.0",
      "lint-staged": "8.1.0",
      "prettier": "1.15.3",
      "ts-jest": "23.10.5",
      "tslint": "5.12.1",
      "tslint-config-prettier": "1.17.0",
      "tslint-plugin-prettier": "2.0.1",
      "typescript": "3.2.2"
    },
    "_registry": "npm",
    "_loc": "/config/.cache/yarn/v6/npm-microcli-1.3.3-27f1b330b0f935be6314f298972105a325f731e7-integrity/node_modules/microcli/package.json",
    "readmeFilename": "README.md",
    "readme": "# microcli ![node version](https://img.shields.io/node/v/microcli.svg) [![Build Status](https://travis-ci.org/pawelgalazka/microcli.svg?branch=master)](https://travis-ci.org/pawelgalazka/microcli) [![npm version](https://badge.fury.io/js/microcli.svg)](https://badge.fury.io/js/microcli)\nCLI scripts micro engine\n\n```js\n#!/usr/bin/env node\nconst microcli = require('microcli')\nconst cli = microcli(process.argv, 'Script doc');\ncli((options, p1, p2) => {\n    console.log('OPTIONS', options)\n    console.log('P1', p1)\n    console.log('P2', p2)\n})\n```\n\n```\n$ script.js -a --foo=bar --boo abc def\nOPTIONS {a: true, foo: 'bar', boo: true }\nP1 abc\nP2 def\n\n$ script.js --help\nUsage: script.js\n\nScript doc\n```\n\n### Annotations\n\n```js\n#!/usr/bin/env node\nconst microcli = require('microcli')\nconst cli = microcli(process.argv, {\n  description: 'Basic script description',\n  params: ['p1', 'p2'],\n  options: {\n    a: 'description for a option',\n    foo: 'description for foo option'\n  },\n  examples: 'some examples'\n});\n\ncli((options, p1, p2) => {\n    console.log('OPTIONS', options)\n    console.log('P1', p1)\n    console.log('P2', p2)\n})\n```\n\n```\n$ script.js --help\nUsage: script.js [options] [p1 p2]\n\nBasic script description\n\nOptions:\n\n    -a         description for a option\n    --foo      description for foo option\n    \nExamples:\n\nsome examples\n```\n\nAnnotations plays part also in validating process. So if\noption which does not exist in annotations is provided, `microcli` will\nthrow an error:\n\n```\n$ script.js --bar\nIllegal option: --bar\nAvailable options: -a --foo\nType \"script.js --help\" for more information\n```\n\nAlso each annotation is optional and custom annotations like `examples`\n(basically other than description, params and options) will be treated\nin `--help` content as additional header with string value.\n\n### Commands\n```\n$ script.js status --foo abc \nOPTIONS {foo: true}\nP abc\n\n$ script.js branch --help\nUsage: branch [options] [p]\n\nBasic script description\n\n$ script.js --foo abc\nOPTIONS {foo: true}\nP abc\n\n```\n\n```js\n#!/usr/bin/env node\nconst microcli = require('microcli')\n\nconst main = microcli(process.argv, {\n  description: 'base command',\n  params: ['p'],\n  options: {\n    foo: 'foo option'\n  }\n})\n\nconst status = microcli(process.argv.slice(1), {\n  description: 'Fake git status',\n  params: ['p'],\n  options: {\n    foo: 'foo option'\n  }\n})\n\nconst branch = microcli(process.argv.slice(1), {\n  description: 'Fake git branch',\n  params: ['p'],\n  options: {\n    foo: 'foo option'\n  }\n})\n\nswitch (process.argv[2]) {\n  case 'status':\n    status((options, p) => {\n      console.log('OPTIONS', options)\n      console.log('P', p)\n    })\n    break\n\n  case 'branch':\n    branch((options, p) => {\n      console.log('OPTIONS', options)\n      console.log('P', p)\n    })\n    break\n\n  default:\n    main((options, p) => {\n      console.log('OPTIONS', options)\n      console.log('P', p)\n    })\n}\n```\n\n### Custom --help\n\nYou can provide `help` function to `cli` call, which can generate\ncustom help message, having annotations object:\n\n```js\n#!/usr/bin/env node\nconst microcli = require('microcli')\nconst cli = microcli(process.argv, {\n  /* some annotations */\n}, (scriptName, annotations, logger) => {\n  logger.log('Custom --help message') \n});\n\ncli((options, p1, p2) => {\n    console.log('OPTIONS', options)\n    console.log('P1', p1)\n    console.log('P2', p2)\n})\n```\n",
    "licenseText": "MIT License\n\nCopyright (c) 2017 Paweł Gałązka\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmmirror.com/microcli/-/microcli-1.3.3.tgz#27f1b330b0f935be6314f298972105a325f731e7",
    "type": "tarball",
    "reference": "https://registry.npmmirror.com/microcli/-/microcli-1.3.3.tgz",
    "hash": "27f1b330b0f935be6314f298972105a325f731e7",
    "integrity": "sha512-1isRaEBpfRC8vJMJymKknAH8CdPFABuWPVc18rlRWHOCcHLYEkJxcoH7FNkX7AuTGrB4Uf1ve6B0s/FfwzGWKg==",
    "registry": "npm",
    "packageName": "microcli",
    "cacheIntegrity": "sha512-1isRaEBpfRC8vJMJymKknAH8CdPFABuWPVc18rlRWHOCcHLYEkJxcoH7FNkX7AuTGrB4Uf1ve6B0s/FfwzGWKg== sha1-J/GzMLD5Nb5jFPKYlyEFoyX3Mec="
  },
  "registry": "npm",
  "hash": "27f1b330b0f935be6314f298972105a325f731e7"
}