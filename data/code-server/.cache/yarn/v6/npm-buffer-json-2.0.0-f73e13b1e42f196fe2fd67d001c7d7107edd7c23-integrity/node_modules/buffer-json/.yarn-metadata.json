{
  "manifest": {
    "name": "buffer-json",
    "version": "2.0.0",
    "description": "JSON.stringify & JSON.parse which can encode/decode buffers.",
    "main": "index.js",
    "scripts": {
      "test": "standard --fix && node test.js"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/jprichardson/buffer-json.git"
    },
    "keywords": [
      "JSON",
      "parse",
      "stringify",
      "buffer",
      "reviver",
      "replacer",
      "base64"
    ],
    "author": {
      "name": "JP Richardson"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/jprichardson/buffer-json/issues"
    },
    "homepage": "https://github.com/jprichardson/buffer-json#readme",
    "devDependencies": {
      "standard": "^12.0.1",
      "tape": "^4.10.1"
    },
    "_registry": "npm",
    "_loc": "/config/.cache/yarn/v6/npm-buffer-json-2.0.0-f73e13b1e42f196fe2fd67d001c7d7107edd7c23-integrity/node_modules/buffer-json/package.json",
    "readmeFilename": "README.md",
    "readme": "# buffer-json\n\n```\nnpm install buffer-json\n```\n\n```js\nconst BJSON = require('buffer-json')\n\nconst str = BJSON.stringify({ buf: Buffer.from('hello') })\n// => '{\"buf\":{\"type\":\"Buffer\",\"data\":\"base64:aGVsbG8=\"}}'\n\nBJSON.parse(str)\n// => { buf: <Buffer 68 65 6c 6c 6f> }\n```\n\nThe [`Buffer`](https://nodejs.org/api/buffer.html#buffer_buffer) class in Node.js is used to represent binary data. JSON does not specify a way to encode binary data, so the Node.js implementation of `JSON.stringify` represents buffers as an object of shape `{ type: \"Buffer\", data: [<bytes as numbers>] }`. Unfortunately, `JSON.parse` does not turn this structure back into a `Buffer` object:\n\n```\n$ node\n> JSON.parse(JSON.stringify({ buf: Buffer.from('hello world') }))\n{ buf:\n   { type: 'Buffer',\n     data: [ 104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100 ] } }\n```\n\n`JSON.stringify` and `JSON.parse` accept arguments called [`replacer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#The_replacer_parameter) and [`reviver`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse#Using_the_reviver_parameter) respectively which allow customizing the parsing/encoding behavior. This module provides a replacer which encodes Buffer data as a base64-encoded string, and a reviver which turns JSON objects which contain buffer-like data (either as arrays of numbers or strings) into `Buffer` instances. All other types of values are parsed/encoded as normal.\n\n## API\n\n### `stringify(value[, space])`\n\nConvenience wrapper for [`JSON.stringify`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify) with the `replacer` described below.\n\n### `parse(text)`\n\nConvenience wrapper for [`JSON.parse`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse) with the `reviver` described below.\n\n### `replacer(key, value)`\n\nA [`replacer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#The_replacer_parameter) implementation which turns every value that is a `Buffer` instance into an object of shape `{ type: 'Buffer', data: 'base64:<base64-encoded buffer content>' }`. Empty buffers are encoded as `{ type: 'Buffer', data: '' }`.\n\n### `reviver(key, value)`\n\nA [`reviver`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse#Using_the_reviver_parameter) implementation which turns every object of shape `{ type: 'Buffer', data: <array of numbers or string> }` into a `Buffer` instance.\n\n## Related modules\n\n- [`buffer-json-encoding`](https://github.com/lachenmayer/buffer-json-encoding): an [`abstract-encoding`](https://github.com/mafintosh/abstract-encoding) compatible JSON encoder/decoder which uses this module.\n\n## License\n\nMIT"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmmirror.com/buffer-json/-/buffer-json-2.0.0.tgz#f73e13b1e42f196fe2fd67d001c7d7107edd7c23",
    "type": "tarball",
    "reference": "https://registry.npmmirror.com/buffer-json/-/buffer-json-2.0.0.tgz",
    "hash": "f73e13b1e42f196fe2fd67d001c7d7107edd7c23",
    "integrity": "sha512-+jjPFVqyfF1esi9fvfUs3NqM0pH1ziZ36VP4hmA/y/Ssfo/5w5xHKfTw9BwQjoJ1w/oVtpLomqwUHKdefGyuHw==",
    "registry": "npm",
    "packageName": "buffer-json",
    "cacheIntegrity": "sha512-+jjPFVqyfF1esi9fvfUs3NqM0pH1ziZ36VP4hmA/y/Ssfo/5w5xHKfTw9BwQjoJ1w/oVtpLomqwUHKdefGyuHw== sha1-9z4TseQvGW/i/WfQAcfXEH7dfCM="
  },
  "registry": "npm",
  "hash": "f73e13b1e42f196fe2fd67d001c7d7107edd7c23"
}