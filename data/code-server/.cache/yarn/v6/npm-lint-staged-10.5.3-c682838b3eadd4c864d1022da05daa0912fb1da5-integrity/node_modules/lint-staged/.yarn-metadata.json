{
  "manifest": {
    "name": "lint-staged",
    "version": "10.5.3",
    "description": "Lint files staged by git",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/okonet/lint-staged"
    },
    "author": {
      "name": "Andrey Okonetchnikov",
      "email": "andrey@okonet.ru"
    },
    "maintainers": [
      {
        "name": "Lufty Wiranda",
        "email": "lufty.wiranda@gmail.com"
      },
      {
        "name": "Suhas Karanth",
        "email": "sudo.suhas@gmail.com"
      },
      {
        "name": "Iiro J√§ppinen",
        "email": "iiro@jappinen.fi",
        "url": "https://iiro.fi"
      }
    ],
    "funding": {
      "url": "https://opencollective.com/lint-staged"
    },
    "bin": {
      "lint-staged": "bin/lint-staged.js"
    },
    "main": "./lib/index.js",
    "files": [
      "bin",
      "lib"
    ],
    "scripts": {
      "cz": "git-cz",
      "lint": "eslint .",
      "pretest": "npm run lint",
      "test": "jest --coverage",
      "test:watch": "jest --watch"
    },
    "husky": {
      "hooks": {
        "pre-commit": "./bin/lint-staged.js"
      }
    },
    "dependencies": {
      "chalk": "^4.1.0",
      "cli-truncate": "^2.1.0",
      "commander": "^6.2.0",
      "cosmiconfig": "^7.0.0",
      "debug": "^4.2.0",
      "dedent": "^0.7.0",
      "enquirer": "^2.3.6",
      "execa": "^4.1.0",
      "listr2": "^3.2.2",
      "log-symbols": "^4.0.0",
      "micromatch": "^4.0.2",
      "normalize-path": "^3.0.0",
      "please-upgrade-node": "^3.2.0",
      "string-argv": "0.3.1",
      "stringify-object": "^3.3.0"
    },
    "devDependencies": {
      "@babel/core": "^7.12.3",
      "@babel/plugin-proposal-object-rest-spread": "^7.12.1",
      "@babel/preset-env": "^7.12.1",
      "babel-eslint": "10.1.0",
      "babel-jest": "^26.6.1",
      "consolemock": "^1.1.0",
      "eslint": "^7.12.1",
      "eslint-config-prettier": "^6.15.0",
      "eslint-plugin-import": "^2.22.1",
      "eslint-plugin-node": "^11.1.0",
      "eslint-plugin-prettier": "^3.1.4",
      "fs-extra": "^9.0.1",
      "husky": "^4.3.0",
      "jest": "^26.6.1",
      "jest-snapshot-serializer-ansi": "^1.0.0",
      "prettier": "^2.1.2"
    },
    "config": {
      "commitizen": {
        "path": "./node_modules/cz-conventional-changelog"
      }
    },
    "jest": {
      "collectCoverage": true,
      "collectCoverageFrom": [
        "lib/**/*.js"
      ],
      "setupFiles": [
        "./testSetup.js"
      ],
      "snapshotSerializers": [
        "jest-snapshot-serializer-ansi"
      ],
      "testEnvironment": "node"
    },
    "keywords": [
      "lint",
      "git",
      "staged",
      "eslint",
      "prettier",
      "stylelint",
      "code",
      "quality",
      "check",
      "format",
      "validate"
    ],
    "_registry": "npm",
    "_loc": "/config/.cache/yarn/v6/npm-lint-staged-10.5.3-c682838b3eadd4c864d1022da05daa0912fb1da5-integrity/node_modules/lint-staged/package.json",
    "readmeFilename": "README.md",
    "readme": "# üö´üí© lint-staged ![GitHub Actions](https://github.com/okonet/lint-staged/workflows/CI/badge.svg) [![Build Status for Windows](https://ci.appveyor.com/api/projects/status/github/okonet/lint-staged?branch=master&svg=true)](https://ci.appveyor.com/project/okonet/lint-staged) [![npm version](https://badge.fury.io/js/lint-staged.svg)](https://badge.fury.io/js/lint-staged) [![Codecov](https://codecov.io/gh/okonet/lint-staged/branch/master/graph/badge.svg)](https://codecov.io/gh/okonet/lint-staged)\n\nRun linters against staged git files and don't let :poop: slip into your code base!\n\n[![asciicast](https://asciinema.org/a/199934.svg)](https://asciinema.org/a/199934)\n\n## Why\n\nLinting makes more sense when run before committing your code. By doing so you can ensure no errors go into the repository and enforce code style. But running a lint process on a whole project is slow and linting results can be irrelevant. Ultimately you only want to lint files that will be committed.\n\nThis project contains a script that will run arbitrary shell tasks with a list of staged files as an argument, filtered by a specified glob pattern.\n\n## Related blogs posts and talks\n\n- [Introductory Medium post - Andrey Okonetchnikov, 2016](https://medium.com/@okonetchnikov/make-linting-great-again-f3890e1ad6b8#.8qepn2b5l)\n- [Running Jest Tests Before Each Git Commit - Ben McCormick, 2017](https://benmccormick.org/2017/02/26/running-jest-tests-before-each-git-commit/)\n- [AgentConf presentation - Andrey Okonetchnikov, 2018](https://www.youtube.com/watch?v=-mhY7e-EsC4)\n- [SurviveJS interview - Juho Veps√§l√§inen and Andrey Okonetchnikov, 2018](https://survivejs.com/blog/lint-staged-interview/)\n\n> If you've written one, please submit a PR with the link to it!\n\n## Installation and setup\n\nThe fastest way to start using lint-staged is to run following command in your terminal:\n\n```bash\nnpx mrm lint-staged\n```\n\nIt will install and configure [husky](https://github.com/typicode/husky) and lint-staged depending on code quality tools from `package.json` dependencies so please make sure you install (`npm install --save-dev`) and configure all code quality tools like [Prettier](https://prettier.io), [ESlint](https://eslint.org) prior that.\n\nDon't forget to commit changes to `package.json` to share this setup with your team!\n\nNow change a few files, `git add` or `git add --patch` some of them to your commit and try to `git commit` them.\n\nSee [examples](#examples) and [configuration](#configuration) for more information.\n\n## Changelog\n\nSee [Releases](https://github.com/okonet/lint-staged/releases)\n\n### Migration\n\n#### v10\n\n- From `v10.0.0` onwards any new modifications to originally staged files will be automatically added to the commit.\n  If your task previously contained a `git add` step, please remove this.\n  The automatic behaviour ensures there are less race-conditions,\n  since trying to run multiple git operations at the same time usually results in an error.\n- From `v10.0.0` onwards _lint-staged_ uses git stashes to improve speed and provide backups while running.\n  Since git stashes require at least an initial commit, you shouldn't run _lint-staged_ in an empty repo.\n- From `v10.0.0` onwards _lint-staged_ requires Node.js version 10.13.0 or later.\n- From `v10.0.0` onwards _lint-staged_ will abort the commit if linter tasks undo all staged changes. To allow creating empty commit, please use the `--allow-empty` option.\n\n## Command line flags\n\n```bash\n‚ùØ npx lint-staged --help\nUsage: lint-staged [options]\n\nOptions:\n  -V, --version                      output the version number\n  --allow-empty                      allow empty commits when tasks revert all staged changes\n                                     (default: false)\n  -c, --config [path]                path to configuration file, or - to read from stdin\n  -d, --debug                        print additional debug information (default: false)\n  --no-stash                         disable the backup stash, and do not revert in case of\n                                     errors\n  -p, --concurrent <parallel tasks>  the number of tasks to run concurrently, or false to run\n                                     tasks serially (default: true)\n  -q, --quiet                        disable lint-staged‚Äôs own console output (default: false)\n  -r, --relative                     pass relative filepaths to tasks (default: false)\n  -x, --shell                        skip parsing of tasks for better shell support (default:\n                                     false)\n  -v, --verbose                      show task output even when tasks succeed; by default only\n                                     failed output is shown (default: false)\n  -h, --help                         display help for command\n```\n\n- **`--allow-empty`**: By default, when linter tasks undo all staged changes, lint-staged will exit with an error and abort the commit. Use this flag to allow creating empty git commits.\n- **`--config [path]`**: Manually specify a path to a config file or npm package name. Note: when used, lint-staged won't perform the config file search and print an error if the specified file cannot be found. If '-' is provided as the filename then the config will be read from stdin, allowing piping in the config like `cat my-config.json | npx lint-staged --config -`.\n- **`--debug`**: Run in debug mode. When set, it does the following:\n  - uses [debug](https://github.com/visionmedia/debug) internally to log additional information about staged files, commands being executed, location of binaries, etc. Debug logs, which are automatically enabled by passing the flag, can also be enabled by setting the environment variable `$DEBUG` to `lint-staged*`.\n  - uses [`verbose` renderer](https://github.com/SamVerschueren/listr-verbose-renderer) for `listr`; this causes serial, uncoloured output to the terminal, instead of the default (beautified, dynamic) output.\n- **`--concurrent [number | (true/false)]`**: Controls the concurrency of tasks being run by lint-staged. **NOTE**: This does NOT affect the concurrency of subtasks (they will always be run sequentially). Possible values are:\n  - `false`: Run all tasks serially\n  - `true` (default) : _Infinite_ concurrency. Runs as many tasks in parallel as possible.\n  - `{number}`: Run the specified number of tasks in parallel, where `1` is equivalent to `false`.\n- **`--no-stash`**: By default a backup stash will be created before running the tasks, and all task modifications will be reverted in case of an error. This option will disable creating the stash, and instead leave all modifications in the index when aborting the commit.\n- **`--quiet`**: Supress all CLI output, except from tasks.\n- **`--relative`**: Pass filepaths relative to `process.cwd()` (where `lint-staged` runs) to tasks. Default is `false`.\n- **`--shell`**: By default linter commands will be parsed for speed and security. This has the side-effect that regular shell scripts might not work as expected. You can skip parsing of commands with this option.\n- **`--verbose`**: Show task output even when tasks succeed. By default only failed output is shown.\n\n## Configuration\n\nStarting with v3.1 you can now use different ways of configuring it:\n\n- `lint-staged` object in your `package.json`\n- `.lintstagedrc` file in JSON or YML format, or you can be explicit with the file extension:\n  - `.lintstagedrc.json`\n  - `.lintstagedrc.yaml`\n  - `.lintstagedrc.yml`\n- `lint-staged.config.js`, `.lintstagedrc.js`, or `.lintstagedrc.cjs` file in JS format\n- Pass a configuration file using the `--config` or `-c` flag\n\nSee [cosmiconfig](https://github.com/davidtheclark/cosmiconfig) for more details on what formats are supported.\n\nConfiguration should be an object where each value is a command to run and its key is a glob pattern to use for this command. This package uses [micromatch](https://github.com/micromatch/micromatch) for glob patterns.\n\n#### `package.json` example:\n\n```json\n{\n  \"lint-staged\": {\n    \"*\": \"your-cmd\"\n  }\n}\n```\n\n#### `.lintstagedrc` example\n\n```json\n{\n  \"*\": \"your-cmd\"\n}\n```\n\nThis config will execute `your-cmd` with the list of currently staged files passed as arguments.\n\nSo, considering you did `git add file1.ext file2.ext`, lint-staged will run the following command:\n\n`your-cmd file1.ext file2.ext`\n\n## Filtering files\n\nLinter commands work on a subset of all staged files, defined by a _glob pattern_. `lint-staged¬¥ uses [micromatch](https://github.com/micromatch/micromatch) for matching files with the following rules:\n\n- If the glob pattern contains no slashes (`/`), micromatch's `matchBase` option will enabled, so globs match a file's basename regardless of directory:\n  - **`\"*.js\"`** will match all JS files, like `/test.js` and `/foo/bar/test.js`\n  - **`\"!(*test).js\"`**. will match all JS files, except those ending in `test.js`, so `foo.js` but not `foo.test.js`\n- If the glob pattern does contain a slash (`/`), it will match for paths as well:\n  - **`\"./*.js\"`** will match all JS files in the git repo root, so `/test.js` but not `/foo/bar/test.js`\n  - **`\"foo/**/\\*.js\"`** will match all JS files inside the`/foo`directory, so`/foo/bar/test.js`but not`/test.js`\n\nWhen matching, `lint-staged` will do the following\n\n- Resolve the git root automatically, no configuration needed.\n- Pick the staged files which are present inside the project directory.\n- Filter them using the specified glob patterns.\n- Pass absolute paths to the linters as arguments.\n\n**NOTE:** `lint-staged` will pass _absolute_ paths to the linters to avoid any confusion in case they're executed in a different working directory (i.e. when your `.git` directory isn't the same as your `package.json` directory).\n\nAlso see [How to use `lint-staged` in a multi package monorepo?](#how-to-use-lint-staged-in-a-multi-package-monorepo)\n\n### Ignoring files\n\nThe concept of `lint-staged` is to run configured linter (or other) tasks on files that are staged in git. `lint-staged` will always pass a list of all staged files to the task, and ignoring any files should be configured in the task itself.\n\nConsider a project that uses [`prettier`](https://prettier.io/) to keep code format consistent across all files. The project also stores minified 3rd-party vendor libraries in the `vendor/` directory. To keep `prettier` from throwing errors on these files, the vendor directory should be added to prettier's ignore configuration, the `.prettierignore` file. Running `npx prettier .` will ignore the entire vendor directory, throwing no errors. When `lint-staged` is added to the project and configured to run prettier, all modified and staged files in the vendor directory will be ignored by prettier, even though it receives them as input.\n\nIn advanced scenarios, where it is impossible to configure the linter task itself to ignore files, but some staged files should still be ignored by `lint-staged`, it is possible to filter filepaths before passing them to tasks by using the function syntax. See [Example: Ignore files from match](#example-ignore-files-from-match).\n\n## What commands are supported?\n\nSupported are any executables installed locally or globally via `npm` as well as any executable from your \\$PATH.\n\n> Using globally installed scripts is discouraged, since lint-staged may not work for someone who doesn‚Äôt have it installed.\n\n`lint-staged` uses [execa](https://github.com/sindresorhus/execa#preferlocal) to locate locally installed scripts. So in your `.lintstagedrc` you can write:\n\n```json\n{\n  \"*.js\": \"eslint --fix\"\n}\n```\n\nPass arguments to your commands separated by space as you would do in the shell. See [examples](#examples) below.\n\n## Running multiple commands in a sequence\n\nYou can run multiple commands in a sequence on every glob. To do so, pass an array of commands instead of a single one. This is useful for running autoformatting tools like `eslint --fix` or `stylefmt` but can be used for any arbitrary sequences.\n\nFor example:\n\n```json\n{\n  \"*.js\": [\"eslint\", \"prettier --write\"]\n}\n```\n\ngoing to execute `eslint` and if it exits with `0` code, it will execute `prettier --write` on all staged `*.js` files.\n\n## Using JS configuration file\n\nWriting the configuration file in JavaScript is the most powerful way to configure _lint-staged_ (`lint-staged.config.js`, [similar](https://github.com/okonet/lint-staged/README.md#configuration), or passed via `--config`). From the configuration file, you can export either a single function, or an object.\n\nIf the `exports` value is a function, it will receive an array of all staged filenames. You can then build your own matchers for the files, and return a command string, or an array or command strings. These strings are considered complete and should include the filename arguments, if wanted.\n\nIf the `exports` value is an object, its keys should be glob matches (like in the normal non-js config format). The values can either be like in the normal config, or individual functions like described above. Instead of receiving all matched files, the functions in the exported object will only receive the staged files matching the corresponding glob key.\n\n### Function signature\n\nThe function can also be async:\n\n```ts\n(filenames: string[]) => string | string[] | Promise<string | string[]>\n```\n\n### Example: Export a function to build your own matchers\n\n```js\n// lint-staged.config.js\nconst micromatch = require('micromatch')\n\nmodule.exports = (allStagedFiles) => {\n    const shFiles =  micromatch(allStagedFiles, ['**/src/**/*.sh']);\n    if (shFiles.length) {\n      return `printf '%s\\n' \"Script files aren't allowed in src directory\" >&2`\n    }\n    const codeFiles = micromatch(allStagedFiles, ['**/*.js', '**/*.ts']);\n    const docFiles = micromatch(allStagedFiles, ['**/*.md']);\n    return [`eslint ${codeFiles.join(' ')}`, `mdl ${docFiles.join(' ')}`];\n  }\n```\n\n\n### Example: Wrap filenames in single quotes and run once per file\n\n```js\n// .lintstagedrc.js\nmodule.exports = {\n  '**/*.js?(x)': (filenames) => filenames.map((filename) => `prettier --write '${filename}'`)\n}\n```\n\n### Example: Run `tsc` on changes to TypeScript files, but do not pass any filename arguments\n\n```js\n// lint-staged.config.js\nmodule.exports = {\n  '**/*.ts?(x)': () => 'tsc -p tsconfig.json --noEmit'\n}\n```\n\n### Example: Run eslint on entire repo if more than 10 staged files\n\n```js\n// .lintstagedrc.js\nmodule.exports = {\n  '**/*.js?(x)': (filenames) =>\n    filenames.length > 10 ? 'eslint .' : `eslint ${filenames.join(' ')}`\n}\n```\n\n### Example: Use your own globs\nIt's better to use the [function-based configuration (seen above)](https://github.com/okonet/lint-staged/README.md#example-export-a-function-to-build-your-own-matchers), if your use case is this.\n\n```js\n// lint-staged.config.js\nconst micromatch = require('micromatch')\n\nmodule.exports = {\n  '*': (allFiles) => {\n    const codeFiles = micromatch(allFiles, ['**/*.js', '**/*.ts']);\n    const docFiles = micromatch(allFiles, ['**/*.md']);\n    return [`eslint ${codeFiles.join(' ')}`, `mdl ${docFiles.join(' ')}`];\n  }\n}\n```\n\n### Example: Ignore files from match\n\nIf for some reason you want to ignore files from the glob match, you can use `micromatch.not()`:\n\n```js\n// lint-staged.config.js\nconst micromatch = require('micromatch')\n\nmodule.exports = {\n  '*.js': (files) => {\n    // from `files` filter those _NOT_ matching `*test.js`\n    const match = micromatch.not(files, '*test.js')\n    return `eslint ${match.join(' ')}`\n  }\n}\n```\n\nPlease note that for most cases, globs can achieve the same effect. For the above example, a matching glob would be `!(*test).js`.\n\n### Example: Use relative paths for commands\n\n```js\nconst path = require('path')\n\nmodule.exports = {\n  '*.ts': (absolutePaths) => {\n    const cwd = process.cwd()\n    const relativePaths = absolutePaths.map((file) => path.relative(cwd, file))\n    return `ng lint myProjectName --files ${relativePaths.join(' ')}`\n  }\n}\n```\n\n## Reformatting the code\n\nTools like [Prettier](https://prettier.io), ESLint/TSLint, or stylelint can reformat your code according to an appropriate config by running `prettier --write`/`eslint --fix`/`tslint --fix`/`stylelint --fix`. Lint-staged will automatically add any modifications to the commit as long as there are no errors.\n\n```json\n{\n  \"*.js\": \"prettier --write\"\n}\n```\n\nPrior to version 10, tasks had to manually include `git add` as the final step. This behavior has been integrated into lint-staged itself in order to prevent race conditions with multiple tasks editing the same files. If lint-staged detects `git add` in task configurations, it will show a warning in the console. Please remove `git add` from your configuration after upgrading.\n\n## Examples\n\nAll examples assuming you‚Äôve already set up lint-staged and husky in the `package.json`.\n\n```json\n{\n  \"name\": \"My project\",\n  \"version\": \"0.1.0\",\n  \"scripts\": {\n    \"my-custom-script\": \"linter --arg1 --arg2\"\n  },\n  \"husky\": {\n    \"hooks\": {\n      \"pre-commit\": \"lint-staged\"\n    }\n  },\n  \"lint-staged\": {}\n}\n```\n\n_Note we don‚Äôt pass a path as an argument for the runners. This is important since lint-staged will do this for you._\n\n### ESLint with default parameters for `*.js` and `*.jsx` running as a pre-commit hook\n\n```json\n{\n  \"*.{js,jsx}\": \"eslint\"\n}\n```\n\n### Automatically fix code style with `--fix` and add to commit\n\n```json\n{\n  \"*.js\": \"eslint --fix\"\n}\n```\n\nThis will run `eslint --fix` and automatically add changes to the commit.\n\n### Reuse npm script\n\nIf you wish to reuse a npm script defined in your package.json:\n\n```json\n{\n  \"*.js\": \"npm run my-custom-script --\"\n}\n```\n\nThe following is equivalent:\n\n```json\n{\n  \"*.js\": \"linter --arg1 --arg2\"\n}\n```\n\n### Use environment variables with linting commands\n\nLinting commands _do not_ support the shell convention of expanding environment variables. To enable the convention yourself, use a tool like [`cross-env`](https://github.com/kentcdodds/cross-env).\n\nFor example, here is `jest` running on all `.js` files with the `NODE_ENV` variable being set to `\"test\"`:\n\n```json\n{\n  \"*.js\": [\"cross-env NODE_ENV=test jest --bail --findRelatedTests\"]\n}\n```\n\n### Automatically fix code style with `prettier` for javascript, typescript, markdown, HTML, or CSS\n\n```json\n{\n  \"*.{js,jsx,ts,tsx,md,html,css}\": \"prettier --write\"\n}\n```\n\n### Stylelint for CSS with defaults and for SCSS with SCSS syntax\n\n```json\n{\n  \"*.css\": \"stylelint\",\n  \"*.scss\": \"stylelint --syntax=scss\"\n}\n```\n\n### Run PostCSS sorting and Stylelint to check\n\n```json\n{\n  \"*.scss\": [\"postcss --config path/to/your/config --replace\", \"stylelint\"]\n}\n```\n\n### Minify the images\n\n```json\n{\n  \"*.{png,jpeg,jpg,gif,svg}\": \"imagemin-lint-staged\"\n}\n```\n\n<details>\n  <summary>More about <code>imagemin-lint-staged</code></summary>\n\n[imagemin-lint-staged](https://github.com/tomchentw/imagemin-lint-staged) is a CLI tool designed for lint-staged usage with sensible defaults.\n\nSee more on [this blog post](https://medium.com/@tomchentw/imagemin-lint-staged-in-place-minify-the-images-before-adding-to-the-git-repo-5acda0b4c57e) for benefits of this approach.\n\n</details>\n\n### Typecheck your staged files with flow\n\n```json\n{\n  \"*.{js,jsx}\": \"flow focus-check\"\n}\n```\n\n## Frequently Asked Questions\n\n### Can I use `lint-staged` via node?\n\nYes!\n\n```js\nconst lintStaged = require('lint-staged')\n\ntry {\n  const success = await lintStaged()\n  console.log(success ? 'Linting was successful!' : 'Linting failed!')\n} catch (e) {\n  // Failed to load configuration\n  console.error(e)\n}\n```\n\nParameters to `lintStaged` are equivalent to their CLI counterparts:\n\n```js\nconst success = await lintStaged({\n  allowEmpty: false,\n  concurrent: true,\n  configPath: './path/to/configuration/file',\n  cwd: process.cwd(),\n  debug: false,\n  maxArgLength: null,\n  quiet: false,\n  relative: false,\n  shell: false\n  stash: true,\n  verbose: false\n})\n```\n\nYou can also pass config directly with `config` option:\n\n```js\nconst success = await lintStaged({\n  allowEmpty: false,\n  concurrent: true,\n  config: { '*.js': 'eslint --fix' },\n  cwd: process.cwd(),\n  debug: false,\n  maxArgLength: null,\n  quiet: false,\n  relative: false,\n  shell: false,\n  stash: true,\n  verbose: false\n})\n```\n\nThe `maxArgLength` option configures chunking of tasks into multiple parts that are run one after the other. This is to avoid issues on Windows platforms where the maximum length of the command line argument string is limited to 8192 characters. Lint-staged might generate a very long argument string when there are many staged files. This option is set automatically from the cli, but not via the Node.js API by default.\n\n### Using with JetBrains IDEs _(WebStorm, PyCharm, IntelliJ IDEA, RubyMine, etc.)_\n\n_**Update**_: The latest version of JetBrains IDEs now support running hooks as you would expect.\n\nWhen using the IDE's GUI to commit changes with the `precommit` hook, you might see inconsistencies in the IDE and command line. This is [known issue](https://youtrack.jetbrains.com/issue/IDEA-135454) at JetBrains so if you want this fixed, please vote for it on YouTrack.\n\nUntil the issue is resolved in the IDE, you can use the following config to work around it:\n\nhusky v1.x\n\n```json\n{\n  \"husky\": {\n    \"hooks\": {\n      \"pre-commit\": \"lint-staged\",\n      \"post-commit\": \"git update-index --again\"\n    }\n  }\n}\n```\n\nhusky v0.x\n\n```json\n{\n  \"scripts\": {\n    \"precommit\": \"lint-staged\",\n    \"postcommit\": \"git update-index --again\"\n  }\n}\n```\n\n_Thanks to [this comment](https://youtrack.jetbrains.com/issue/IDEA-135454#comment=27-2710654) for the fix!_\n\n### How to use `lint-staged` in a multi package monorepo?\n\nStarting with v5.0, `lint-staged` automatically resolves the git root **without any** additional configuration. You configure `lint-staged` as you normally would if your project root and git root were the same directory.\n\nIf you wish to use `lint-staged` in a multi package monorepo, it is recommended to install [`husky`](https://github.com/typicode/husky) in the root package.json.\n[`lerna`](https://github.com/lerna/lerna) can be used to execute the `precommit` script in all sub-packages.\n\nExample repo: [sudo-suhas/lint-staged-multi-pkg](https://github.com/sudo-suhas/lint-staged-multi-pkg).\n\n### Can I lint files outside of the current project folder?\n\ntl;dr: Yes, but the pattern should start with `../`.\n\nBy default, `lint-staged` executes linters only on the files present inside the project folder(where `lint-staged` is installed and run from).\nSo this question is relevant _only_ when the project folder is a child folder inside the git repo.\nIn certain project setups, it might be desirable to bypass this restriction. See [#425](https://github.com/okonet/lint-staged/issues/425), [#487](https://github.com/okonet/lint-staged/issues/487) for more context.\n\n`lint-staged` provides an escape hatch for the same(`>= v7.3.0`). For patterns that start with `../`, all the staged files are allowed to match against the pattern.\nNote that patterns like `*.js`, `**/*.js` will still only match the project files and not any of the files in parent or sibling directories.\n\nExample repo: [sudo-suhas/lint-staged-django-react-demo](https://github.com/sudo-suhas/lint-staged-django-react-demo).\n\n### How can i ignore files from `.eslintignore` ?\n\nESLint throws out `warning File ignored because of a matching ignore pattern. Use \"--no-ignore\" to override` warnings that breaks the linting process ( if you used `--max-warnings=0` which is recommended ).\n\nBased on the discussion from https://github.com/eslint/eslint/issues/9977 , it was decided that using [the outlined script ](https://github.com/eslint/eslint/issues/9977#issuecomment-406420893)is the best route to fix this.\n\nSo you can setup a `.lintstagedrc.js` config file to do this:\n\n```js\nconst { CLIEngine } = require('eslint')\n\nconst cli = new CLIEngine({})\n\nmodule.exports = {\n  '*.js': (files) =>\n    'eslint --max-warnings=0 ' + files.filter((file) => !cli.isPathIgnored(file)).join(' ')\n}\n```\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2016 Andrey Okonetchnikov\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmmirror.com/lint-staged/-/lint-staged-10.5.3.tgz#c682838b3eadd4c864d1022da05daa0912fb1da5",
    "type": "tarball",
    "reference": "https://registry.npmmirror.com/lint-staged/-/lint-staged-10.5.3.tgz",
    "hash": "c682838b3eadd4c864d1022da05daa0912fb1da5",
    "integrity": "sha512-TanwFfuqUBLufxCc3RUtFEkFraSPNR3WzWcGF39R3f2J7S9+iF9W0KTVLfSy09lYGmZS5NDCxjNvhGMSJyFCWg==",
    "registry": "npm",
    "packageName": "lint-staged",
    "cacheIntegrity": "sha512-TanwFfuqUBLufxCc3RUtFEkFraSPNR3WzWcGF39R3f2J7S9+iF9W0KTVLfSy09lYGmZS5NDCxjNvhGMSJyFCWg== sha1-xoKDiz6t1Mhk0QItoF2qCRL7HaU="
  },
  "registry": "npm",
  "hash": "c682838b3eadd4c864d1022da05daa0912fb1da5"
}