{
  "manifest": {
    "name": "fast-glob",
    "version": "2.2.7",
    "description": "Is a faster `node-glob` alternative",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/mrmlnc/fast-glob.git"
    },
    "author": {
      "name": "Denis Malinochkin",
      "url": "canonium.com"
    },
    "engines": {
      "node": ">=4.0.0"
    },
    "main": "index.js",
    "typings": "index.d.ts",
    "keywords": [
      "glob",
      "patterns",
      "fast",
      "implementation"
    ],
    "devDependencies": {
      "@types/bash-glob": "^2.0.0",
      "@types/compute-stdev": "^1.0.0",
      "@types/easy-table": "^0.0.32",
      "@types/execa": "^0.9.0",
      "@types/glob": "^7.1.1",
      "@types/glob-parent": "^3.1.0",
      "@types/glob-stream": "^6.1.0",
      "@types/globby": "^8.0.0",
      "@types/is-glob": "^4.0.0",
      "@types/merge2": "^1.1.4",
      "@types/micromatch": "^3.1.0",
      "@types/minimist": "^1.2.0",
      "@types/mocha": "^5.2.5",
      "@types/node": "^11.13.5",
      "@types/rimraf": "^2.0.2",
      "bash-glob": "^2.0.0",
      "compute-stdev": "^1.0.0",
      "easy-table": "^1.1.1",
      "execa": "^0.9.0",
      "fast-glob": "^2.2.0",
      "glob": "^7.1.2",
      "glob-stream": "^6.1.0",
      "globby": "^8.0.1",
      "minimist": "^1.2.0",
      "mocha": "^5.2.0",
      "rimraf": "^2.6.2",
      "tiny-glob": "^0.2.3",
      "tslint": "^5.12.0",
      "tslint-config-mrmlnc": "^2.0.1",
      "typescript": "^3.1.3"
    },
    "dependencies": {
      "@mrmlnc/readdir-enhanced": "^2.2.1",
      "@nodelib/fs.stat": "^1.1.2",
      "glob-parent": "^3.1.0",
      "is-glob": "^4.0.0",
      "merge2": "^1.2.3",
      "micromatch": "^3.1.10"
    },
    "scripts": {
      "clean": "rimraf out",
      "lint": "tslint \"src/**/*.ts\" -p . -t stylish",
      "compile": "tsc",
      "test": "mocha \"out/**/*.spec.js\" -s 0",
      "smoke": "mocha \"out/**/*.smoke.js\" -s 0",
      "build": "npm run clean && npm run compile && npm run lint && npm test",
      "watch": "npm run clean && npm run compile -- --sourceMap --watch",
      "bench-async-1": "node ./out/benchmark --depth 1",
      "bench-async-5": "node ./out/benchmark --depth 5",
      "bench-async-10": "node ./out/benchmark --depth 10",
      "bench-async-50": "node ./out/benchmark --depth 50",
      "bench-async-100": "node ./out/benchmark --depth 100",
      "bench-async": "npm run bench-async-1 && npm run bench-async-5 && npm run bench-async-10 && npm run bench-async-50 && npm run bench-async-100",
      "bench-sync-1": "node ./out/benchmark --depth 1 --type sync",
      "bench-sync-5": "node ./out/benchmark --depth 5 --type sync",
      "bench-sync-10": "node ./out/benchmark --depth 10 --type sync",
      "bench-sync-50": "node ./out/benchmark --depth 50 --type sync",
      "bench-sync-100": "node ./out/benchmark --depth 100 --type sync",
      "bench-sync": "npm run bench-sync-1 && npm run bench-sync-5 && npm run bench-sync-10 && npm run bench-sync-50 && npm run bench-sync-100",
      "bench": "npm run build && npm run bench-async && npm run bench-sync"
    },
    "_registry": "npm",
    "_loc": "/config/.cache/yarn/v6/npm-fast-glob-2.2.7-6953857c3afa475fff92ee6015d52da70a4cd39d-integrity/node_modules/fast-glob/package.json",
    "readmeFilename": "README.md",
    "readme": "# :rocket: fast-glob\n\n> Is a faster [`node-glob`](https://github.com/isaacs/node-glob) alternative.\n\n## :bulb: Highlights\n\n  * :rocket: Fast by using Streams and Promises. Used [readdir-enhanced](https://github.com/BigstickCarpet/readdir-enhanced) and [micromatch](https://github.com/jonschlinkert/micromatch).\n  * :beginner: User-friendly, since it supports multiple and negated patterns (`['*', '!*.md']`).\n  * :vertical_traffic_light: Rational, because it doesn't read excluded directories (`!**/node_modules/**`).\n  * :gear: Universal, because it supports Synchronous, Promise and Stream API.\n  * :money_with_wings: Economy, because it provides `fs.Stats` for matched path if you wanted.\n\n## Donate\n\nIf you want to thank me, or promote your Issue.\n\n[![Donate](https://img.shields.io/badge/Donate-PayPal-green.svg)](https://paypal.me/mrmlnc)\n\n> Sorry, but I have work and support for packages requires some time after work. I will be glad of your support and PR's.\n\n## Install\n\n```\n$ npm install --save fast-glob\n```\n\n## Usage\n\n#### Asynchronous\n\n```js\nconst fg = require('fast-glob');\n\nfg(['src/**/*.js', '!src/**/*.spec.js']).then((entries) => console.log(entries));\nfg.async(['src/**/*.js', '!src/**/*.spec.js']).then((entries) => console.log(entries));\n```\n\n#### Synchronous\n\n```js\nconst fg = require('fast-glob');\n\nconst entries = fg.sync(['src/**/*.js', '!src/**/*.spec.js']);\nconsole.log(entries);\n```\n\n#### Stream\n\n```js\nconst fg = require('fast-glob');\n\nconst stream = fg.stream(['src/**/*.js', '!src/**/*.spec.js']);\n\nconst entries = [];\n\nstream.on('data', (entry) => entries.push(entry));\nstream.once('error', console.log);\nstream.once('end', () => console.log(entries));\n```\n\n## API\n\n### fg(patterns, [options])\n### fg.async(patterns, [options])\n\nReturns a `Promise` with an array of matching [entries](#entry).\n\n### fg.sync(patterns, [options])\n\nReturns an array of matching [entries](#entry).\n\n### fg.stream(patterns, [options])\n\nReturns a [`ReadableStream`](https://nodejs.org/api/stream.html#stream_readable_streams) when the `data` event will be emitted with [`Entry`](#entry).\n\n#### patterns\n\n  * Type: `string|string[]`\n\nThis package does not respect the order of patterns. First, all the negative patterns are applied, and only then the positive patterns.\n\n#### options\n\n  * Type: `Object`\n\nSee [options](#options-1) section for more detailed information.\n\n### fg.generateTasks(patterns, [options])\n\nReturn a set of tasks based on provided patterns. All tasks satisfy the `Task` interface:\n\n```ts\ninterface Task {\n  /**\n   * Parent directory for all patterns inside this task.\n   */\n  base: string;\n  /**\n   * Dynamic or static patterns are in this task.\n   */\n  dynamic: boolean;\n  /**\n   * All patterns.\n   */\n  patterns: string[];\n  /**\n   * Only positive patterns.\n   */\n  positive: string[];\n  /**\n   * Only negative patterns without ! symbol.\n   */\n  negative: string[];\n}\n```\n\n## Entry\n\nThe entry which can be a `string` if the [`stats`](#stats) option is disabled, otherwise `fs.Stats` with two additional `path` and `depth` properties.\n\n## Options\n\n#### cwd\n\n  * Type: `string`\n  * Default: `process.cwd()`\n\nThe current working directory in which to search.\n\n#### deep\n\n  * Type: `number|boolean`\n  * Default: `true`\n\nThe deep option can be set to `true` to traverse the entire directory structure, or it can be set to a *number* to only traverse that many levels deep.\n\nFor example, you have the following tree:\n\n```\ntest\n└── one\n    └── two\n        └── index.js\n```\n\n> :book: If you specify a pattern with some base directory, this directory will not participate in the calculation of the depth of the found directories. Think of it as a `cwd` option.\n\n```js\nfg('test/**', { onlyFiles: false, deep: 0 });\n// -> ['test/one']\nfg('test/**', { onlyFiles: false, deep: 1 });\n// -> ['test/one', 'test/one/two']\n\nfg('**', { onlyFiles: false, cwd: 'test', deep: 0 });\n// -> ['one']\nfg('**', { onlyFiles: false, cwd: 'test', deep: 1 });\n// -> ['one', 'one/two']\n```\n\n#### ignore\n\n  * Type: `string[]`\n  * Default: `[]`\n\nAn array of glob patterns to exclude matches.\n\n#### dot\n\n  * Type: `boolean`\n  * Default: `false`\n\nAllow patterns to match filenames starting with a period (files & directories), even if the pattern does not explicitly have a period in that spot.\n\n#### stats\n\n  * Type: `boolean`\n  * Default: `false`\n\nReturn `fs.Stats` with two additional `path` and `depth` properties instead of a `string`.\n\n#### onlyFiles\n\n  * Type: `boolean`\n  * Default: `true`\n\nReturn only files.\n\n#### onlyDirectories\n\n  * Type: `boolean`\n  * Default: `false`\n\nReturn only directories.\n\n#### followSymlinkedDirectories\n\n  * Type: `boolean`\n  * Default: `true`\n\nFollow symlinked directories when expanding `**` patterns.\n\n#### unique\n\n  * Type: `boolean`\n  * Default: `true`\n\nPrevent duplicate results.\n\n#### markDirectories\n\n  * Type: `boolean`\n  * Default: `false`\n\nAdd a `/` character to directory entries.\n\n#### absolute\n\n  * Type: `boolean`\n  * Default: `false`\n\nReturn absolute paths for matched entries.\n\n> :book: Note that you need to use this option if you want to use absolute negative patterns like `${__dirname}/*.md`.\n\n#### nobrace\n\n  * Type: `boolean`\n  * Default: `false`\n\nDisable expansion of brace patterns (`{a,b}`, `{1..3}`).\n\n#### brace\n\n  * Type: `boolean`\n  * Default: `true`\n\nThe [`nobrace`](#nobrace) option without double-negation. This option has a higher priority then `nobrace`.\n\n#### noglobstar\n\n  * Type: `boolean`\n  * Default: `false`\n\nDisable matching with globstars (`**`).\n\n#### globstar\n\n  * Type: `boolean`\n  * Default: `true`\n\nThe [`noglobstar`](#noglobstar) option without double-negation. This option has a higher priority then `noglobstar`.\n\n#### noext\n\n  * Type: `boolean`\n  * Default: `false`\n\nDisable extglob support (patterns like `+(a|b)`), so that extglobs are regarded as literal characters.\n\n#### extension\n\n  * Type: `boolean`\n  * Default: `true`\n\nThe [`noext`](#noext) option without double-negation. This option has a higher priority then `noext`.\n\n#### nocase\n\n  * Type: `boolean`\n  * Default: `false`\n\nDisable a [case-sensitive](https://en.wikipedia.org/wiki/Case_sensitivity) mode for matching files.\n\n##### Examples\n\n* File System: `test/file.md`, `test/File.md`\n* Case-sensitive for `test/file.*` pattern (`false`): `test/file.md`\n* Case-insensitive for `test/file.*` pattern (`true`): `test/file.md`, `test/File.md`\n\n#### case\n\n  * Type: `boolean`\n  * Default: `true`\n\nThe [`nocase`](#nocase) option without double-negation. This option has a higher priority then `nocase`.\n\n#### matchBase\n\n  * Type: `boolean`\n  * Default: `false`\n\nAllow glob patterns without slashes to match a file path based on its basename. For example, `a?b` would match the path `/xyz/123/acb`, but not `/xyz/acb/123`.\n\n#### transform\n\n  * Type: `Function`\n  * Default: `null`\n\nAllows you to transform a path or `fs.Stats` object before sending to the array.\n\n```js\nconst fg = require('fast-glob');\n\nconst entries1 = fg.sync(['**/*.scss']);\nconst entries2 = fg.sync(['**/*.scss'], { transform: (entry) => '_' + entry });\n\nconsole.log(entries1); // ['a.scss', 'b.scss']\nconsole.log(entries2); // ['_a.scss', '_b.scss']\n```\n\nIf you are using **TypeScript**, you probably want to specify your own type of the returned array.\n\n```ts\nimport * as fg from 'fast-glob';\n\ninterface IMyOwnEntry {\n\tpath: string;\n}\n\nconst entries: IMyOwnEntry[] = fg.sync<IMyOwnEntry>(['*.md'], {\n\ttransform: (entry) => typeof entry === 'string' ? { path: entry } : { path: entry.path }\n\t// Will throw compilation error for non-IMyOwnEntry types (boolean, for example)\n});\n```\n\n## How to exclude directory from reading?\n\nYou can use a negative pattern like this: `!**/node_modules` or `!**/node_modules/**`. Also you can use `ignore` option. Just look at the example below.\n\n```\nfirst/\n├── file.md\n└── second\n    └── file.txt\n```\n\nIf you don't want to read the `second` directory, you must write the following pattern: `!**/second` or `!**/second/**`.\n\n```js\nfg.sync(['**/*.md', '!**/second']); // ['first/file.txt']\nfg.sync(['**/*.md'], { ignore: '**/second/**' }); // ['first/file.txt']\n```\n\n> :warning: When you write `!**/second/**/*` it means that the directory will be **read**, but all the entries will not be included in the results.\n\nYou have to understand that if you write the pattern to exclude directories, then the directory will not be read under any circumstances.\n\n## How to use UNC path?\n\nYou cannot use UNC paths as patterns (due to syntax), but you can use them as `cwd` directory.\n\n```ts\nfg.sync('*', { cwd: '\\\\\\\\?\\\\C:\\\\Python27' /* or //?/C:/Python27 */ });\nfg.sync('Python27/*', { cwd: '\\\\\\\\?\\\\C:\\\\' /* or //?/C:/ */ });\n```\n\n## Compatible with `node-glob`?\n\nNot fully, because `fast-glob` does not implement all options of `node-glob`. See table below.\n\n| node-glob    | fast-glob |\n| :----------: | :-------: |\n| `cwd`        | [`cwd`](#cwd) |\n| `root`       | – |\n| `dot`        | [`dot`](#dot) |\n| `nomount`    | – |\n| `mark`       | [`markDirectories`](#markdirectories) |\n| `nosort`     | – |\n| `nounique`   | [`unique`](#unique) |\n| `nobrace`    | [`nobrace`](#nobrace) or [`brace`](#brace) |\n| `noglobstar` | [`noglobstar`](#noglobstar) or [`globstar`](#globstar) |\n| `noext`      | [`noext`](#noext) or [`extension`](#extension) |\n| `nocase`     | [`nocase`](#nocase) or [`case`](#case) |\n| `matchBase`  | [`matchbase`](#matchbase) |\n| `nodir`      | [`onlyFiles`](#onlyfiles) |\n| `ignore`     | [`ignore`](#ignore) |\n| `follow`     | [`followSymlinkedDirectories`](#followsymlinkeddirectories) |\n| `realpath`   | – |\n| `absolute`   | [`absolute`](#absolute) |\n\n## Benchmarks\n\n**Tech specs:**\n\nServer: [Vultr Bare Metal](https://www.vultr.com/pricing/baremetal)\n\n  * Processor: E3-1270v6 (8 CPU)\n  * RAM: 32GB\n  * Disk: SSD\n\nYou can see results [here](https://gist.github.com/mrmlnc/f06246b197f53c356895fa35355a367c) for latest release.\n\n## Related\n\n  * [readdir-enhanced](https://github.com/BigstickCarpet/readdir-enhanced) – Fast functional replacement for `fs.readdir()`.\n  * [globby](https://github.com/sindresorhus/globby) – User-friendly glob matching.\n  * [node-glob](https://github.com/isaacs/node-glob) – «Standard» glob functionality for Node.js\n  * [bash-glob](https://github.com/micromatch/bash-glob) – Bash-powered globbing for node.js.\n  * [glob-stream](https://github.com/gulpjs/glob-stream) – A Readable Stream interface over node-glob that used in the [gulpjs](https://github.com/gulpjs/gulp).\n  * [tiny-glob](https://github.com/terkelg/tiny-glob) – Tiny and extremely fast library to match files and folders using glob patterns.\n\n## Changelog\n\nSee the [Releases section of our GitHub project](https://github.com/mrmlnc/fast-glob/releases) for changelogs for each release version.\n\n## License\n\nThis software is released under the terms of the MIT license.\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) Denis Malinochkin\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmmirror.com/fast-glob/-/fast-glob-2.2.7.tgz#6953857c3afa475fff92ee6015d52da70a4cd39d",
    "type": "tarball",
    "reference": "https://registry.npmmirror.com/fast-glob/-/fast-glob-2.2.7.tgz",
    "hash": "6953857c3afa475fff92ee6015d52da70a4cd39d",
    "integrity": "sha512-g1KuQwHOZAmOZMuBtHdxDtju+T2RT8jgCC9aANsbpdiDDTSnjgfuVsIBNKbUeJI3oKMRExcfNDtJl4OhbffMsw==",
    "registry": "npm",
    "packageName": "fast-glob",
    "cacheIntegrity": "sha512-g1KuQwHOZAmOZMuBtHdxDtju+T2RT8jgCC9aANsbpdiDDTSnjgfuVsIBNKbUeJI3oKMRExcfNDtJl4OhbffMsw== sha1-aVOFfDr6R1//ku5gFdUtpwpM050="
  },
  "registry": "npm",
  "hash": "6953857c3afa475fff92ee6015d52da70a4cd39d"
}